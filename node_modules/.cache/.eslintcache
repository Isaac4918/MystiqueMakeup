[{"C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\index.js":"1","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\App.js":"2","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\ProcessedPurchase.js":"3","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\Home.js":"4","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\LoginRegister.js":"5","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\Search.js":"6","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\Cart.js":"7","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\MyPurchases.js":"8","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\PaymentDetails.js":"9","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\categoryPages\\ManageCategories.js":"10","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\categoryPages\\DeleteCategory.js":"11","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\categoryPages\\ModifyCategory.js":"12","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\categoryPages\\CreateCategory.js":"13","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\accountPages\\ModifyAccount.js":"14","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\accountPages\\ManageAdmin.js":"15","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\productPages\\ProductManagement.js":"16","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\productPages\\ModifyProduct.js":"17","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\publicationPages\\ModifyPublication.js":"18","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\accountPages\\AccountAdmin.js":"19","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\accountPages\\AccountUser.js":"20","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\accountPages\\DeleteAccount.js":"21","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\publicationPages\\PublicationManagement.js":"22","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\productPages\\ProductScreen.js":"23","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\productPages\\CreateProduct.js":"24","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\publicationPages\\PublicationScreen.js":"25","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\publicationPages\\CreatePublication.js":"26","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\components\\Navbar.js":"27","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\Calendar.js":"28"},{"size":240,"mtime":1698474349198,"results":"29","hashOfConfig":"30"},{"size":3692,"mtime":1700558103370,"results":"31","hashOfConfig":"30"},{"size":583,"mtime":1699298545053,"results":"32","hashOfConfig":"30"},{"size":4231,"mtime":1699298545043,"results":"33","hashOfConfig":"30"},{"size":7542,"mtime":1700540598724,"results":"34","hashOfConfig":"30"},{"size":7024,"mtime":1700452691576,"results":"35","hashOfConfig":"30"},{"size":5769,"mtime":1700540598697,"results":"36","hashOfConfig":"30"},{"size":4693,"mtime":1700452691576,"results":"37","hashOfConfig":"30"},{"size":15207,"mtime":1700452691576,"results":"38","hashOfConfig":"30"},{"size":1259,"mtime":1698474349207,"results":"39","hashOfConfig":"30"},{"size":5534,"mtime":1699298545085,"results":"40","hashOfConfig":"30"},{"size":8086,"mtime":1699298545085,"results":"41","hashOfConfig":"30"},{"size":5620,"mtime":1699298545084,"results":"42","hashOfConfig":"30"},{"size":4929,"mtime":1699298545083,"results":"43","hashOfConfig":"30"},{"size":4705,"mtime":1699298545076,"results":"44","hashOfConfig":"30"},{"size":4319,"mtime":1699298545088,"results":"45","hashOfConfig":"30"},{"size":9649,"mtime":1699298545087,"results":"46","hashOfConfig":"30"},{"size":9281,"mtime":1699298545090,"results":"47","hashOfConfig":"30"},{"size":3290,"mtime":1700544210525,"results":"48","hashOfConfig":"30"},{"size":2627,"mtime":1700540598745,"results":"49","hashOfConfig":"30"},{"size":2410,"mtime":1700540598755,"results":"50","hashOfConfig":"30"},{"size":4586,"mtime":1700452691576,"results":"51","hashOfConfig":"30"},{"size":5273,"mtime":1700540598766,"results":"52","hashOfConfig":"30"},{"size":9258,"mtime":1700452691576,"results":"53","hashOfConfig":"30"},{"size":3325,"mtime":1700452691584,"results":"54","hashOfConfig":"30"},{"size":9151,"mtime":1700452691576,"results":"55","hashOfConfig":"30"},{"size":3322,"mtime":1700540598685,"results":"56","hashOfConfig":"30"},{"size":6989,"mtime":1700587571939,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ulpy98",{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\index.js",[],[],"C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\App.js",[],[],"C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\ProcessedPurchase.js",[],[],"C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\Home.js",[],[],"C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\LoginRegister.js",["161"],[],"import React, { useState, useEffect } from 'react';\r\nimport '../styles/Account.css';\r\nimport Navbar from \"../components/Navbar\" \r\nimport { useNavigate } from 'react-router-dom';\r\nimport backButton from '../components/assets/back.png'\r\n\r\nexport function Back(){\r\n    const navigate = useNavigate();\r\n  \r\n    const HomePage = () => {\r\n        navigate('/');\r\n    };\r\n  \r\n    return(\r\n        <div className='back'> \r\n            <a onClick={HomePage}><img src={backButton} alt=\"\"/></a>\r\n        </div>\r\n    )\r\n  }\r\n\r\nexport function Register() {\r\n    const navigate = useNavigate();\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [email, setEmail] = useState('')\r\n\r\n\r\n    const handleInputChange = (name, value) => {\r\n        if(name === \"username\"){\r\n            setUsername(value)\r\n        }\r\n        else if(name === \"password\"){\r\n            setPassword(value)\r\n        }\r\n        else if(name === \"email\"){\r\n            setEmail(value)\r\n        }\r\n    }\r\n\r\n    const createAccount = async(pUser, pPassword, pEmail) => {\r\n        const newData = await fetch('http://localhost:5000/createAccount',{\r\n            method: 'POST',\r\n            headers : {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: pUser,\r\n                password: pPassword,\r\n                email: pEmail,\r\n                admin: false\r\n            })\r\n        }).then(res => res.json())\r\n        if(newData.response === 'Account created successfully'){\r\n            alert('Cuenta creada con éxito');\r\n            navigate('/');\r\n        }\r\n    }\r\n    \r\n    const handleAccount = (event) => {\r\n        event.preventDefault();\r\n        if(username === \"\" || password === \"\" || email === \"\"){\r\n            alert(\"ERROR: Todos los campos son obligatorios\");\r\n            return;\r\n        }else{\r\n            if(username.length < 4){\r\n                alert(\"ERROR: El nombre de usuario debe tener más de 4 caracteres\");\r\n                return;\r\n            }\r\n\r\n            if(username.length > 10){\r\n                alert(\"ERROR: Nombre de usuario demasiado largo, recuerde que debe estar entre 4 y 10 caracteres\");\r\n                return;\r\n            }\r\n            \r\n            const regexEmail = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n            if(regexEmail.test(email) === false){\r\n                alert(\"ERROR: Por favor ingresar un correo válido\");\r\n                return;\r\n            }\r\n\r\n            const regexPassword = /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#%&])/;\r\n            if(password.length < 8 || regexPassword.test(password) === false){\r\n                alert(\"ERROR: Por favor ingresar una contraseña minimo de 8 digitos con al menos una letra, número y caracter especial\");\r\n                return;\r\n            }\r\n            \r\n            createAccount(username, password, email);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Register\">\r\n            <form>\r\n                <h1>Registrar cuenta</h1>\r\n                <label>Usuario</label>\r\n                <br />\r\n                <input\r\n                    type='text'\r\n                    name='username'\r\n                    onChange={(e) => handleInputChange(e.target.name, e.target.value)}\r\n                />\r\n                <br />\r\n                <label>Correo electrónico</label>\r\n                <br />\r\n                <input\r\n                    type='email'\r\n                    name='email'\r\n                    onChange={(e) => handleInputChange(e.target.name, e.target.value)}\r\n                />\r\n                <br />\r\n                <label>Contraseña</label>\r\n                <br />\r\n                <input\r\n                    type='password'\r\n                    name='password'\r\n                    onChange={(e) => handleInputChange(e.target.name, e.target.value)}\r\n                />\r\n                <br />\r\n                <button onClick={handleAccount}>Crear Cuenta</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport function Login() {\r\n    const navigate = useNavigate();\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const handleInputChange = (name, value) => {\r\n        if(name === \"username\"){\r\n            setUsername(value)\r\n        }\r\n        else if(name === \"password\"){\r\n            setPassword(value)\r\n        }\r\n    }\r\n\r\n    const signIn = async(pUser, pPassword) => {\r\n        console.log(\"ENTRO A SING IN\");\r\n        console.log(\"USER\", pUser, \"PASSWORD\", pPassword);\r\n        \r\n        const response = await fetch('http://localhost:5000/loginAccount',{\r\n            method: 'POST',\r\n            headers : {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: pUser,\r\n                password: pPassword\r\n            })\r\n        })\r\n\r\n        if(response.ok) {\r\n            const data = await response.text();\r\n            localStorage.setItem('username', data);\r\n            navigate('/');\r\n        } else {\r\n            alert(\"ERROR: Revisar los datos ingresados\");\r\n        }\r\n    }\r\n\r\n    const handleLogin = (event) => {\r\n        event.preventDefault();\r\n        if(username === \"\" || password === \"\"){\r\n            alert(\"ERROR: Todos los campos son obligatorios\");\r\n            return;\r\n        }else{\r\n            if(username.length < 4){\r\n                alert(\"ERROR: El nombre de usuario debe tener más de 4 caracteres\");\r\n                return;\r\n            }\r\n\r\n            if(username.length > 10){\r\n                alert(\"ERROR: Nombre de usuario demasiado largo, recuerde que debe estar entre 4 y 10 caracteres\");\r\n                return;\r\n            }\r\n            \r\n            const regexPassword = /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#%&])/;\r\n            if(password.length < 8 || regexPassword.test(password) === false){\r\n                alert(\"ERROR: Por favor ingresar una contraseña minimo de 8 digitos con al menos una letra, número y caracter especial\");\r\n                return;\r\n            }\r\n            \r\n            signIn(username, password);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Login\">\r\n            <form>\r\n                <h1>Inicio Sesión</h1>\r\n                <label>Usuario</label>\r\n                <br />\r\n                <input\r\n                    name='username'\r\n                    type='text'\r\n                    onChange={(e) => handleInputChange(e.target.name, e.target.value)}\r\n                />\r\n                <br />\r\n                <label>Contraseña</label>\r\n                <br />\r\n                <input\r\n                    name='password'\r\n                    type='password'\r\n                    onChange={(e) => handleInputChange(e.target.name, e.target.value)} \r\n                />\r\n                <br />\r\n                <button onClick={handleLogin}>Iniciar Sesión</button>\r\n            </form>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nfunction LoginRegister() {\r\n    useEffect(() => {\r\n        localStorage.removeItem('username');\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar showIcons={false} />\r\n            <Back/>\r\n            <div className='LoginRegister'>\r\n                <Register />\r\n                <Login />\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default LoginRegister;\r\n","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\Search.js",[],[],"C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\Cart.js",["162","163","164","165","166","167"],[],"import React, { useEffect, useState } from 'react';\r\nimport '../styles/Cart.css';\r\nimport Navbar from \"../components/Navbar\"\r\nimport back from \"../components/assets/arrowBack.png\";\r\n\r\nexport function Back() {\r\n  const handleGoBack = () => {\r\n    window.history.back();\r\n  };\r\n  return (\r\n    <div className=\"backCart\">\r\n      <a onClick={handleGoBack}><img src={back} alt=\"\" /></a>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Cart() {\r\n  const [productList, setProductList] = useState([]);\r\n  const baseAPIurl = 'http://localhost:5000';\r\n  const [totalPrice, setTotalPrice] = useState(0);\r\n  //const [total, setTotal] = useState(calculateTotal({}));\r\n  //const[cart, setCart] = useState({})\r\n  let username = localStorage.getItem('username');\r\n\r\n  const ModifyQuantity = ({ quantity, onIncrement, onDecrement }) => {\r\n    //let number = available - (available - 1);\r\n    return (\r\n      <div>\r\n        <div className=\"buttonIncrement\">\r\n          <div className=\"available\">\r\n            <button onClick={onDecrement}>-</button>\r\n  \r\n            <label onChange={calculateTotal}>{quantity}</label>\r\n  \r\n            <button onClick={onIncrement}>+</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  \r\n    );\r\n  \r\n  };\r\n\r\n  const OpenPayment = () => {\r\n    return (\r\n      <div>\r\n        <a href=\"/PaymentDetails\"><button onClick={updateCart} className=\"buttonPay\">Pagar</button></a>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const calculateTotal = () => {\r\n    setTotalPrice(productList.reduce((total, product) => total + product.price * product.quantity, 0));\r\n  };\r\n\r\n  const getCart = async () => {\r\n    console.log(\"USERNAME\", username);\r\n    const response = await fetch(baseAPIurl + '/shoppingCart/get', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'Authorization': username\r\n      }\r\n    }).then(res => res.json());\r\n    console.log(\"CARRITO\", response);\r\n    console.log(\"PRODUCTO\", response.products)\r\n    setProductList(response.products)\r\n    let totalvar = 0;\r\n    for (let i = 0; i < response.products.length; i++) {\r\n      totalvar += response.products[i].price * response.products[i].quantity;\r\n    }\r\n    setTotalPrice(totalvar);\r\n  }\r\n\r\n  const onIncrement = (index) => {\r\n    setProductList((prevProducts) => {\r\n      if(prevProducts[index].available > prevProducts[index].quantity){\r\n        const updatedProduct = { ...prevProducts[index], quantity: prevProducts[index].quantity + 1 };\r\n        const updatedProducts = [...prevProducts];\r\n        updatedProducts[index] = updatedProduct;\r\n        return updatedProducts;\r\n      }else{\r\n        return prevProducts;\r\n      }\r\n    });\r\n  };\r\n\r\n  const onDecrement = (index) => {\r\n    setProductList((prevProducts) => {\r\n      const updatedProduct = { ...prevProducts[index], quantity: prevProducts[index].quantity - 1 };\r\n      const updatedProducts = [...prevProducts];\r\n      updatedProducts[index] = updatedProduct;\r\n\r\n      // If the available is zero, remove the product from the cart\r\n      if (updatedProduct.quantity === 0) {\r\n        updatedProducts.splice(index, 1);\r\n        deleteCart();\r\n      }\r\n      return updatedProducts;\r\n    });\r\n  };\r\n\r\n  const updateCart = async() =>{\r\n    const response = await fetch(baseAPIurl + '/shoppingCart/update', {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            username: username,\r\n            products: productList\r\n        })\r\n    });\r\n  }\r\n\r\n  const deleteCart = async() =>{\r\n    const response = await fetch(baseAPIurl + '/shoppingCart/empty', {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            username: username,\r\n            products: productList\r\n        })\r\n    });\r\n}\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    getCart();\r\n    calculateTotal();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    calculateTotal();\r\n  }, [productList]);\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Navbar showIcons={true} />\r\n      <div className=\"CartManagement\">\r\n        <Back />\r\n        <div className=\"container\">\r\n          <h1>Mi Carrito</h1>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Producto</th>\r\n                <th>Nombre</th>\r\n                <th>Precio</th>\r\n                <th>Cantidad</th>\r\n                <th>Total</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {Array.isArray(productList) && productList.map((product, index) => {\r\n                return (\r\n                  <tr key={product.name}>\r\n                    <div className=\"imageContentCart\">\r\n                      <div className=\"cardImageCart\">\r\n                        <td><img src={product.imageURL} alt={product.name} /></td>\r\n                      </div>\r\n                    </div>\r\n                    <td>{product.name}</td>\r\n                    <td>{product.price}</td>\r\n                    <td>\r\n                    <ModifyQuantity\r\n                        quantity={product.quantity}\r\n                        onIncrement={() => onIncrement(index)}\r\n                        onDecrement={() => onDecrement(index)}\r\n                      />\r\n                    </td>\r\n                    <td>{product.price * product.quantity}</td>\r\n                  </tr>)\r\n              })}\r\n            </tbody>\r\n          </table>\r\n\r\n          <h2>Total: ₡{totalPrice}</h2>\r\n          <div className=\"buttonPay\">\r\n            <OpenPayment />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n{/*\r\n\r\n*/}\r\n\r\nexport default Cart;","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\MyPurchases.js",["168"],[],"import React from \"react\";\r\nimport \"../styles/Purchase.css\";\r\nimport Navbar from \"../components/Navbar\";\r\n\r\nimport Carousel from 'react-multi-carousel';\r\nimport 'react-multi-carousel/lib/styles.css';\r\nimport back from \"../components/assets/arrowBack.png\";\r\nimport { Link } from 'react-router-dom';\r\nimport { useState, useEffect } from \"react\";\r\nimport { Dialog } from 'primereact/dialog';\r\n\r\nimport 'primereact/resources/themes/lara-light-indigo/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\n\r\nfunction MyPurchases(){\r\n    const [visible, setVisible] = useState(false);\r\n    const [selectedProduct, setSelectedProduct] = useState(null);\r\n    const [purchases, setPurchases] = useState([]);\r\n    let username = localStorage.getItem('username');\r\n    \r\n    const getPurchases = async() => {\r\n        const response = await fetch('http://localhost:5000/purchases/get/all',{\r\n          method: 'GET',\r\n          headers : {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json' \r\n          }\r\n        }).then(res => res.json());\r\n\r\n        let purchasesListAll = [];\r\n        for (let i = 0; i < response.length; i++) {\r\n            purchasesListAll.push(response[i]);\r\n        }\r\n\r\n        let purchasesList = []; \r\n        purchasesListAll.forEach(element => {\r\n            if(element.username === username){\r\n                purchasesList.push(element);\r\n            }\r\n        });\r\n\r\n        setPurchases(purchasesList);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPurchases();\r\n    }, []);\r\n\r\n    const responsive = {\r\n        superLargeDesktop: {\r\n            breakpoint: { max: 4000, min: 3000 },\r\n            items: 5\r\n        },\r\n        desktop: {\r\n            breakpoint: { max: 3000, min: 1024 },\r\n            items: 3\r\n        },\r\n        tablet: {\r\n            breakpoint: { max: 1024, min: 464 },\r\n            items: 2\r\n        },\r\n        mobile: {\r\n            breakpoint: { max: 464, min: 0 },\r\n            items: 1\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"MyPurchases\">\r\n            <Navbar showIcons={true} />\r\n            <Link to={\"/accountUser\"}><button className=\"backManagement\"><img src={back} alt=\"\"/></button></Link>\r\n            <h1>Mis compras</h1>\r\n            <div className=\"containerPurchase\">\r\n                <Carousel responsive={responsive}>\r\n                    {purchases.map((purchase, index) => (\r\n                    <div className=\"cardPurchase\" key={index}>\r\n                        <div className=\"contentPurchase\">\r\n                            <div className=\"cardContentPurchase\">\r\n                                <div className=\"numPurchase\">No. {purchase.orderNumber}</div>\r\n                                <div className=\"descriptionPurchase\">\r\n                                    <span style={{ color: purchase.scheduled ? '#6d961a' : '#23aec1', fontWeight: 'bold', letterSpacing: '2px'}}>\r\n                                        {purchase.scheduled ? 'Agendada' : 'Pendiente'}\r\n                                    </span>\r\n                                </div>\r\n                                <div className=\"descriptionPurchase\">Fecha: {purchase.paymentDate}</div>\r\n                                <div className=\"descriptionPurchase\">Precio total:  ₡{purchase.finalPrice}</div>\r\n                                <button className=\"buttonConsult\" onClick={() => {setSelectedProduct(purchase); setVisible(true)}}>Ver productos</button>\r\n                                <Dialog \r\n                                    visible={visible} \r\n                                    onHide={() => {setSelectedProduct(null); setVisible(false)}}\r\n                                    style={{width: '35vw', height: '500px'}}\r\n                                    header='Productos comprados'\r\n                                    draggable={false}\r\n                                    resizable={false}\r\n                                    dismissableMask>\r\n                                    {selectedProduct && selectedProduct.cart.products.map((product, {username}) => (\r\n                                        <div className=\"descriptionPurchase\" key={username}>\r\n                                            <li>{product.name} x{product.quantity} = {product.quantity * product.price}</li>\r\n                                        </div>\r\n                                    ))}\r\n                                </Dialog>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            ))}\r\n                </Carousel>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPurchases;","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\PaymentDetails.js",["169","170","171","172"],[],"import React from \"react\";\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport \"../styles/Payment.css\";\r\nimport Navbar from \"../components/Navbar\"\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport 'primereact/resources/themes/saga-blue/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport back from \"../components/assets/arrowBack.png\";\r\nimport imagePlaceholder from '../components/assets/imagePlaceHolder.png';\r\n\r\nfunction PaymentDetails() {\r\n    // VARIABLES -----------------------------------------------------------------\r\n    const navigate = useNavigate();\r\n    const hiddenFileInput = useRef(null);\r\n    let username = localStorage.getItem('username');\r\n\r\n    const baseAPIurl = 'http://localhost:5000';\r\n    const [blobImage, setBlobImage] = useState('-');\r\n\r\n    const [selectedProvince, setSelectedProvince] = useState('');\r\n    const [selectedCanton, setSelectedCanton] = useState('');\r\n    const [selectedDistrict, setSelectedDistrict] = useState('');\r\n    const [selectedDetails, setSelectedDetails] = useState('');\r\n    const [selectedImage, setImage] = useState(imagePlaceholder);\r\n    const [cantons, setCantons] = useState([]);\r\n    const [districts, setDistricts] = useState([]);\r\n    const [deliveryPrice, setDeliveryPrice] = useState(0);\r\n    const [productQuantity, setProductQuantity] = useState(0);\r\n    const [totalPrice, setTotalPrice] = useState(0);\r\n    const [partialPrice, setPartialPrice] = useState(0);\r\n    const [addressText, setAddressText] = useState('');\r\n    const [shoppingCart, setShoppingCart] = useState({});\r\n    const [calculated, setCalculated] = useState(false);\r\n\r\n    const address = [\r\n        {\r\n            province: \"San José\",\r\n            cantons: [\r\n                {\r\n                    canton: \"Tibás\", districts: [\"Colima\", \"Cinco Esquinas\"]\r\n                },\r\n                {\r\n                    canton: \"Escazú\", districts: [\"San Antonio\", \"San Rafael\"]\r\n                },\r\n                {\r\n                    canton: \"Puriscal\", districts: [\"Desamparaditos\", \"Chires\"]\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            province: \"Cartago\",\r\n            cantons: [\r\n                {\r\n                    canton: \"Paraíso\", districts: [\"Orosi\", \"Cachi\"]\r\n                },\r\n                {\r\n                    canton: \"Turrialba\", districts: [\"Santa Cruz\", \"Peralta\"]\r\n                },\r\n                {\r\n                    canton: \"El Guarco\", districts: [\"San Isidro\", \"El Tejar\"]\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            province: \"Alajuela\",\r\n            cantons: [\r\n                {\r\n                    canton: \"San Ramón\", districts: [\"Volio\", \"Santiago\"]\r\n                },\r\n                {\r\n                    canton: \"Atenas\", districts: [\"Jesús\", \"Mercedes\"]\r\n                },\r\n                {\r\n                    canton: \"Poás\", districts: [\"San Pedro\", \"San Juan\"]\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            province: \"Heredia\",\r\n            cantons: [\r\n                {\r\n                    canton: \"Santo Domingo\", districts: [\"San Miguel\", \"Tures\"]\r\n                },\r\n                {\r\n                    canton: \"Barva\", districts: [\"San Pedro\", \"San Pablo\"]\r\n                },\r\n                {\r\n                    canton: \"Santa Bárbara\", districts: [\"San Pedro\", \"San Juan\"]\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            province: \"Guanacaste\",\r\n            cantons: [\r\n                {\r\n                    canton: \"Liberia\", districts: [\"Cañas\", \"Bagaces\"]\r\n                },\r\n                {\r\n                    canton: \"Nicoya\", districts: [\"Santa Cruz\", \"Nandayure\"]\r\n                },\r\n                {\r\n                    canton: \"Santa Cruz\", districts: [\"Bolsón\", \"Veintisiete de Abril\"]\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            province: \"Puntarenas\",\r\n            cantons: [\r\n                {\r\n                    canton: \"Quepos\", districts: [\"Naranjito\", \"Savegre\"]\r\n                },\r\n                {\r\n                    canton: \"Esparza\", districts: [\"San Rafael\", \"San Jerónimo\"]\r\n                },\r\n                {\r\n                    canton: \"Buenos Aires\", districts: [\"Volcán\", \"Potrero Grande\"]\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            province: \"Limón\",\r\n            cantons: [\r\n                {\r\n                    canton: \"Limón\", districts: [\"Valle La Estrella\", \"Matama\"]\r\n                },\r\n                {\r\n                    canton: \"Pococi\", districts: [\"Guápiles\", \"Rita\"]\r\n                },\r\n                {\r\n                    canton: \"Siquirres\", districts: [\"Pacuarito\", \"Florida\"]\r\n                }\r\n            ]\r\n        }\r\n    ];\r\n\r\n    const prices = {\r\n        \"San José\": 1000,\r\n        \"Cartago\": 1000,\r\n        \"Alajuela\": 1000,\r\n        \"Heredia\": 1000,\r\n        \"Guanacaste\": 3000,\r\n        \"Puntarenas\": 3000,\r\n        \"Limón\": 3000,\r\n    }\r\n\r\n    const getCart = async () => {\r\n        const response = await fetch(baseAPIurl + '/shoppingCart/get', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n                'Authorization': username\r\n            }\r\n        }).then(res => res.json());\r\n        setShoppingCart(response);\r\n\r\n        let quantity = 0;\r\n        for (let i = 0; i < response.products.length; i++) {\r\n            quantity += response.products[i].quantity;\r\n        }\r\n        setProductQuantity(quantity);\r\n    }\r\n    // USE EFFECTS -----------------------------------------------------------------\r\n    useEffect(() => {\r\n        getCart();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (selectedProvince) {\r\n            const province = address.find((p) => p.province === selectedProvince);\r\n            setCantons(province ? province.cantons : []);\r\n            setDeliveryPrice(prices[selectedProvince]);\r\n            console.log(prices[selectedProvince]);\r\n        }\r\n        else {\r\n            setCantons([]);\r\n        }\r\n    }, [selectedProvince]);\r\n\r\n    useEffect(() => {\r\n        if (selectedCanton) {\r\n            const canton = cantons.find((c) => c.canton === selectedCanton);\r\n            setDistricts(canton ? canton.districts : []);\r\n        }\r\n        else {\r\n            setDistricts([]);\r\n        }\r\n    }, [selectedCanton, cantons]);\r\n\r\n    useEffect(() => {\r\n        if (selectedCanton) {\r\n            const canton = cantons.find((c) => c.canton === selectedCanton);\r\n            setDistricts(canton ? canton.districts : []);\r\n            setAddressText(selectedProvince + ', ' + selectedCanton + ', ' + selectedDistrict);\r\n        }\r\n        else {\r\n            setDistricts([]);\r\n        }\r\n    }, [selectedDistrict]);\r\n\r\n    // FUNCTIONS -----------------------------------------------------------------\r\n    const handleClickImage = (event) => {\r\n        hiddenFileInput.current.click();\r\n    };\r\n\r\n    const handleChangeImage = (event) => {\r\n        const fileUploaded = event.target.files;\r\n        if (fileUploaded[0]) {\r\n            setImage(URL.createObjectURL(fileUploaded[0]));\r\n            setBlobImage(fileUploaded[0]);\r\n        }\r\n    };\r\n\r\n    const calculateFinalPrice = () => {\r\n        setCalculated(true);\r\n        let tempPrice = 0;\r\n        let quantity = 0;\r\n        for (let i = 0; i < shoppingCart.products.length; i++) {\r\n            tempPrice += shoppingCart.products[i].price * shoppingCart.products[i].quantity;\r\n            quantity += shoppingCart.products[i].quantity;\r\n        }\r\n        setProductQuantity(quantity);\r\n        setPartialPrice(tempPrice);\r\n        if (deliveryPrice !== 0) {\r\n\r\n            setTotalPrice(tempPrice + deliveryPrice);\r\n        } else {\r\n            alert(\"ERROR: Debe seleccionar una dirección de entrega\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const handlePayment = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!selectedProvince || !selectedCanton || !selectedCanton || !selectedDetails || !selectedImage) {\r\n            alert(\"ERROR: Todos los campos son obligatorios\");\r\n            return;\r\n        }\r\n\r\n        if (selectedDetails.length > 122) {\r\n            alert(\"ERROR: La descripción es muy larga, el máximo es 122 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedDetails.length < 10) {\r\n            alert(\"ERROR: La descripción es muy corta, el mínimo es 28 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedImage === imagePlaceholder) {\r\n            alert(\"ERROR: Debe seleccionar una imagen\");\r\n            return;\r\n        }\r\n\r\n        if (!calculated) {\r\n            alert('ERROR: Se debe calcular precio final antes de finalizar el pago.');\r\n            return;\r\n        }\r\n\r\n        let result = await createPurchase();\r\n        if (result.status === 200) {\r\n            // update the products in the cart so they reduce the available quantity\r\n            for (let i = 0; i < shoppingCart.products.length; i++) {\r\n                const product = shoppingCart.products[i];\r\n                console.log(product)\r\n                await fetch(baseAPIurl + '/products/reduce/availability', {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Accept': 'application/json'\r\n                    }, body: JSON.stringify({\r\n                        id: product.id,\r\n                        quantity: product.quantity\r\n                    })\r\n                });\r\n            }\r\n\r\n            // empty the shopping cart in the database\r\n            await fetch(baseAPIurl + '/shoppingCart/empty', {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                }, body: JSON.stringify({\r\n                    username: username\r\n                })\r\n            });\r\n            alert(\"Compra realizada con éxito\");\r\n            navigate('/');\r\n        } else {\r\n            alert(\"ERROR: No se pudo procesar la compra\");\r\n        }\r\n    }\r\n\r\n    const createPurchase = async () => {\r\n        const date = new Date();\r\n        const year = date.getFullYear();\r\n        const month = date.getMonth() + 1; // months are zero indexed\r\n        const day = date.getDate();\r\n        const formattedDate = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year.toString().slice(-2)}`;\r\n\r\n        // get id\r\n        const currentId = await fetch(baseAPIurl + '/purchases/get/id', {\r\n            method: 'GET',\r\n        }).then(res => res.json());\r\n\r\n        // update the id\r\n        const nextId = await fetch(baseAPIurl + '/purchases/update/id', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }, body: JSON.stringify({\r\n                id: currentId + 1\r\n            })\r\n        });\r\n\r\n        // upload the image\r\n        let formData = new FormData();\r\n        formData.append('image', blobImage)\r\n\r\n        const uploadImage = await fetch(baseAPIurl + '/image/upload/receipt/' + currentId.toString(), {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            },\r\n            body: formData\r\n        }).then(res => res.json());\r\n\r\n        // save the url of the image\r\n        let imageURL = uploadImage.imageUrl;\r\n\r\n        //define the path of the image\r\n        let imagePath = 'Receipts/' + currentId.toString();\r\n\r\n        // create the purchase\r\n        const newData = await fetch(baseAPIurl + '/purchases/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                orderNumber: currentId,\r\n                username: username,\r\n                address: addressText,\r\n                details: selectedDetails,\r\n                receiptImagePath: imagePath,\r\n                receiptImageURL: imageURL,\r\n                partialPrice: partialPrice,\r\n                finalPrice: totalPrice,\r\n                scheduled: false,\r\n                paymentDate: formattedDate,\r\n                deliveryDate: \"\",\r\n                cart: shoppingCart\r\n            })\r\n        });\r\n\r\n        return newData;\r\n    }\r\n\r\n    // RETURN -----------------------------------------------------------------\r\n    return (\r\n        <div className=\"PaymentDetails\">\r\n            <Navbar showIcons={true} />\r\n            <Link to={\"/Cart\"}><button className=\"backManagement\"><img src={back} alt=\"\" /></button></Link>\r\n            <h1>Datos de Pago</h1>\r\n            <section className=\"layoutPayment\">\r\n                <div className=\"LeftGridPayment\">\r\n                    <label><b>Dirección de entrega:</b></label><br />\r\n                    <div className=\"dropdows\">\r\n                        <Dropdown name=\"province\" value={selectedProvince} onChange={(e) => setSelectedProvince(e.target.value)} options={address.map((item) => item.province)} placeholder=\"Seleccione provincia\" className=\"optionsPayment\" />\r\n                        <br />\r\n\r\n                        <Dropdown name=\"canton\" value={selectedCanton} onChange={(e) => setSelectedCanton(e.target.value)} options={cantons.map((item) => item.canton)} placeholder=\"Seleccione cantón\" className=\"optionsPayment\" />\r\n                        <br />\r\n\r\n                        <Dropdown name=\"district\" value={selectedDistrict} onChange={(e) => setSelectedDistrict(e.target.value)} options={districts} placeholder=\"Seleccione distrito\" className=\"optionsPayment\" />\r\n                        <br />\r\n                    </div>\r\n                    <label><b>Detalles de entrega:</b></label><br />\r\n                    <textarea type=\"text\" name=\"details\" id=\"details\" value={selectedDetails} onChange={(e) => setSelectedDetails(e.target.value)} /><br />\r\n\r\n                    <label><b>Cantidad de productos:</b></label>\r\n                    <label>{productQuantity}</label><br />\r\n\r\n                    <label><b>Precio final:</b></label>\r\n                    <label>{totalPrice}</label><br />\r\n                    <button className=\"buttonEnd\" type=\"button\" onClick={calculateFinalPrice}>Calcular Precio Final</button>\r\n                    <button className=\"buttonEnd\" type=\"button\" onClick={handlePayment}>Finalizar pago</button>\r\n\r\n                </div>\r\n                <div className=\"RightGridPayment\">\r\n                    <img src={selectedImage} alt=\"\" name=\"image\" />\r\n                    <button className=\"buttonLoadPayment\" type=\"button\" onClick={handleClickImage}>Cargar comprobante</button>\r\n                    <input type=\"file\" onChange={handleChangeImage} ref={hiddenFileInput} style={{ display: \"none\" }} />\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PaymentDetails;","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\categoryPages\\ManageCategories.js",[],[],"C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\categoryPages\\DeleteCategory.js",["173"],[],"import React, { useState, useEffect } from 'react';\r\nimport '../../styles/Category.css'\r\nimport backButton from '../../components/assets/back.png'\r\nimport Navbar from \"../../components/Navbar\" \r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Dropdown, DropdownItem, DropdownMenu, DropdownToggle } from 'reactstrap'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport function BackAccount(){\r\n    return(\r\n        <div className=\"back\"> \r\n            <a href=\"/account/manageCategories\"><img src={backButton} alt=\"\"/></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function EraseCategory(){\r\n    const [dropdownCategory, setDropdownCategory] = useState(false);\r\n    const [selectedCategory, setSelectedCategory] = useState(null);\r\n    const [selectedKeyCategory, setSelectedKeyCategory] = useState(0);\r\n    const [dropdownSubcategory, setDropdownSubcategory] = useState(false);\r\n    const [selectedSubcategory, setSelectedSubcategory] = useState(null);\r\n    const [parsedCategories, setParsedCategories] = useState([]);\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const OpenCloseDropdownCategory = () =>{\r\n        setDropdownCategory(!dropdownCategory);\r\n    }\r\n\r\n    const handleSelectCategory = (event) => {\r\n        setSelectedCategory(event.currentTarget.textContent);\r\n        setSelectedKeyCategory(event.currentTarget.getAttribute('data-key'))\r\n    }\r\n\r\n    const OpenCloseDropdownSubcategory = () =>{\r\n        setDropdownSubcategory(!dropdownSubcategory);\r\n    }\r\n\r\n    const handleSelectSubcategory = (event) => {\r\n        setSelectedSubcategory(event.currentTarget.textContent);\r\n    }\r\n\r\n    const Check = () => {\r\n      setIsChecked(!isChecked);\r\n    }\r\n\r\n    const getCategories = async () => {\r\n        const response = await fetch('http://localhost:5000/category/all', {\r\n            method: 'GET',\r\n        }).then(res => res.json());\r\n\r\n        let categorylist = [];\r\n        for (let i = 0; i < response.length; i++) {\r\n            categorylist.push(response[i]);\r\n        }\r\n        setParsedCategories(categorylist);\r\n    }\r\n    useEffect(() => {\r\n        getCategories();\r\n    }, []);\r\n\r\n    const handleConfirmation = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if(!selectedCategory){\r\n            alert('Debe elegir una categoría');\r\n        }\r\n\r\n        else if(window.confirm(\"¿Está seguro que desea eliminar la categoría \" + selectedCategory + \"?\")){\r\n            let result = await deleteCategory(selectedKeyCategory, selectedCategory);\r\n            if (result.status === 200) {\r\n                alert(\"Categoría eliminada con éxito\");\r\n                navigate('/account/manageCategories');\r\n            } else {\r\n                alert(\"ERROR: la categoría \" + selectedCategory + \" no se pudo eliminar, hubo un error o está asociada a una o más publicaciones o productos\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const deleteCategory = async (pId, pCategory) => {\r\n        console.log(\"PIDDDDDDDDDDDDD\", pId, pCategory)\r\n        const response = await fetch('http://localhost:5000/category/delete', {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                id: pId,\r\n                name: pCategory\r\n            })\r\n        });\r\n\r\n        return response;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1 name='categoryTitle'>Eliminar Categoría</h1>\r\n            <label name='categoryLabel'>Seleccione categoría: </label>\r\n            <Dropdown isOpen={dropdownCategory} toggle={OpenCloseDropdownCategory}>\r\n                <DropdownToggle caret className='selectBox'>\r\n                    {parsedCategories.length > 0 ? selectedCategory : \"No hay categorías\"}\r\n                </DropdownToggle>\r\n\r\n                <DropdownMenu>\r\n                    {parsedCategories.map((category, index) => (\r\n                        <DropdownItem key={index} data-key={category.id} onClick={handleSelectCategory}>{category.name}</DropdownItem>\r\n                    ))}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n\r\n            <br /><br />\r\n            {\r\n            isChecked && \r\n                    <div>\r\n                        <label name='categoryLabel'>Seleccione subcategoría:</label>\r\n                        <Dropdown isOpen={dropdownSubcategory} toggle={OpenCloseDropdownSubcategory}>\r\n                            <DropdownToggle caret className='selectBox'>\r\n                                {selectedSubcategory} \r\n                            </DropdownToggle>\r\n            \r\n                            <DropdownMenu>\r\n                                <DropdownItem onClick={handleSelectSubcategory}>Cruela</DropdownItem>\r\n                                <DropdownItem onClick={handleSelectSubcategory}>Bruja</DropdownItem>\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                        <br />\r\n                    </div>\r\n            }\r\n            <br /><br />\r\n            <button name='categoryOption' onClick={handleConfirmation}>Eliminar</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction DeleteCategory() {\r\n    return (\r\n        <div>\r\n            <Navbar showIcons={false} />\r\n            <div className=\"deleteCategory\">\r\n                <BackAccount />\r\n                <EraseCategory />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeleteCategory;","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\categoryPages\\ModifyCategory.js",["174","175"],[],"import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Dropdown, DropdownItem, DropdownMenu, DropdownToggle } from 'reactstrap';\r\nimport backButton from '../../components/assets/back.png'\r\nimport Navbar from \"../../components/Navbar\"\r\nimport '../../styles/Category.css'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nexport function BackAccount() {\r\n    return (\r\n        <div className=\"back\">\r\n            <a href=\"/account/manageCategories\"><img src={backButton} alt=\"\" /></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function UpdateInfo() {\r\n    const [dropdown, setDropdown] = useState(false);\r\n    const [selectedItem, setSelectedItem] = useState(null);\r\n    const [selectedKey, setSelectedKey] = useState(0);\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const [inputCount, setInputCount] = useState(\"0\");\r\n    const [inputs, setInputs] = useState([]);\r\n    const [inputValues, setInputValues] = useState([]);\r\n    const [selectedCategory, setSelectedCategory] = useState('');\r\n    const [parsedCategories, setParsedCategories] = useState([]);\r\n    const [currentCategory, setCurrentCategory] = useState(false);\r\n    const [subcatSelected, setSubcatSelected] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n\r\n    const OpenCloseDropdown = () => {\r\n        setDropdown(!dropdown);\r\n    }\r\n\r\n    const handleSelect = (event) => {\r\n        setSelectedItem(event.currentTarget.textContent);\r\n        setSelectedKey(event.currentTarget.getAttribute('data-key'))\r\n        let id = event.currentTarget.getAttribute('data-key');\r\n        let currentCategoryVar = getCategoryById(id);\r\n        setCurrentCategory(currentCategoryVar);\r\n        console.log(\"Me actualicé\")\r\n    }\r\n\r\n    const updateInputs = async () => {\r\n        if (currentCategory !== false) {\r\n            setInputCount(currentCategory.subCategories.length);\r\n            generateInputs(currentCategory.subCategories.length);\r\n            setSelectedCategory(currentCategory.name);\r\n            setInputValues(currentCategory.subCategories);\r\n            setIsChecked(true)\r\n        }\r\n    }\r\n\r\n    const Check = () => {\r\n        setIsChecked(!isChecked);\r\n    };\r\n\r\n    const getCategoryById = (pId) => {\r\n        for (let i = 0; i < parsedCategories.length; i++) {\r\n            if (parsedCategories[i].id.toString() === pId) {\r\n                return parsedCategories[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkInputValues = () => {\r\n        for (let i = 0; i < inputValues.length; i++) {\r\n            if (inputValues[i] === '') {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const getCategories = async () => {\r\n        const response = await fetch('http://localhost:5000/category/all', {\r\n            method: 'GET',\r\n        }).then(res => res.json());\r\n\r\n        let categorylist = [];\r\n        for (let i = 0; i < response.length; i++) {\r\n            categorylist.push(response[i]);\r\n        }\r\n        setParsedCategories(categorylist);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCategories();\r\n    }, []);\r\n\r\n    const handleInputChange = (event) => {\r\n        const newInputCount = event.target.value;\r\n        setInputCount(newInputCount);\r\n\r\n        if (newInputCount < inputCount) {\r\n            setInputValues(inputValues.slice(0, newInputCount));\r\n        } else if (newInputCount > inputCount) {\r\n            setInputValues(prevInputValues => [...prevInputValues, ...new Array(newInputCount - inputCount).fill('')]);\r\n        }\r\n\r\n        setInputCount(event.target.value);\r\n        generateInputs(event.target.value);\r\n    }\r\n\r\n\r\n    const generateInputs = (num) => {\r\n        const newInputs = [];\r\n        for (let i = 0; i < num; i++) {\r\n            newInputs.push(\r\n                <input\r\n                    key={i}\r\n                    type=\"text\"\r\n                    name='generateInputs'\r\n                    onChange={event => {\r\n                        const newValue = event.target.value;\r\n                        setInputValues(prevInputValues => {\r\n                          const newInputValues = [...prevInputValues];\r\n                          newInputValues[i] = { name: newValue };\r\n                          return newInputValues;\r\n                        });\r\n                      }}\r\n                />\r\n            );\r\n        }\r\n        setInputs(newInputs);\r\n    }\r\n\r\n    const handleConfirmation = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!selectedCategory) {\r\n            alert('Todos los campos son obligatorios');\r\n        }\r\n\r\n        else if (inputCount === \"0\" || !isChecked) {\r\n            alert('Ingrese la cantidad de subcategorías');\r\n        }\r\n\r\n        else if (checkInputValues()) {\r\n            alert('Todos los campos son obligatorios');\r\n        }\r\n\r\n        else {\r\n            let result = await updateCategory(selectedKey, selectedCategory, inputValues);\r\n            if (result.status === 200) {\r\n                alert(\"Categoría modificada con éxito\");\r\n                navigate('/account/manageCategories');\r\n            } else {\r\n                alert(\"ERROR: No se pudo modificar la categoría\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const updateCategory = async (pId, pCategory, pSubcategories) => {\r\n        //aca solo actualiza las subcategorias de la categoria seleccionada\r\n        const response = await fetch('http://localhost:5000/category/update', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                id: pId,\r\n                name: pCategory,\r\n                subCategories: pSubcategories\r\n            })\r\n        });\r\n\r\n        return response;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 name='categoryTitle'>Modificar Categoría</h1>\r\n            <label name='categoryLabel'>Seleccione una categoría: </label>\r\n            <Dropdown isOpen={dropdown} toggle={OpenCloseDropdown}>\r\n                <DropdownToggle caret className='selectBox'>\r\n                    {selectedItem}\r\n                </DropdownToggle>\r\n\r\n                <DropdownMenu>\r\n                    {parsedCategories.map((category) => (\r\n                        <DropdownItem key={category.id} data-key={category.id} onClick={handleSelect}>{category.name}</DropdownItem>\r\n                    ))}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n            <button name='categoryOption' onClick={updateInputs}>Obtener Información</button>\r\n            <div>\r\n                <label name='categoryLabel'>Nombre</label>\r\n                <br />\r\n                <input type='text' name='nameCategory' value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)} />\r\n                <br />\r\n                <label name='categoryLabel'>\r\n                    <input type=\"checkbox\" name='subcategoryCheckBox' checked={isChecked} onChange={Check} />\r\n                    &nbsp;Modificar subcategoría\r\n                </label>\r\n                <br /><br />\r\n                {\r\n                    isChecked &&\r\n                    <div>\r\n                        <label name='categoryLabel'>\r\n                            Cantidad de subcategorías:\r\n                            &nbsp;<input type=\"number\" min=\"0\" name='numberInput' value={inputCount} onChange={handleInputChange} />\r\n                        </label>\r\n                        <br />\r\n                        {inputs}\r\n                    </div>\r\n                }\r\n                <br />\r\n                <button name='categoryOption' onClick={handleConfirmation}>Modificar</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction ModifyCategory() {\r\n    return (\r\n        <div>\r\n            <Navbar showIcons={false} />\r\n            <div className='modifyCategory'>\r\n                <BackAccount />\r\n                <UpdateInfo />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ModifyCategory;","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\categoryPages\\CreateCategory.js",["176"],[],"import React, { useState } from 'react';\r\nimport '../../styles/Category.css'\r\nimport backButton from '../../components/assets/back.png'\r\nimport Navbar from \"../../components/Navbar\" \r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport function BackAccount(){\r\n    return(\r\n        <div className=\"back\"> \r\n            <a href=\"/account/manageCategories\"><img src={backButton} alt=\"\"/></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function InfoCategory(){\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const [inputCount, setInputCount] = useState(\"0\");\r\n    const [selectedCategory, setSelectedCategory] = useState('');\r\n    const [inputs, setInputs] = useState([]);\r\n    const [inputValues, setInputValues] = useState([]);\r\n    const navigate = useNavigate();\r\n\r\n    const Check = () => {\r\n      setIsChecked(!isChecked);\r\n    };\r\n\r\n    const checkInputValues = () => {\r\n        for(let i = 0; i < inputValues.length; i++) {\r\n            if(inputValues[i] === '') {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const handleInputChange = (event) => {\r\n        const newInputCount = event.target.value;\r\n        setInputCount(newInputCount);\r\n\r\n        if (newInputCount < inputCount) {\r\n            setInputValues(inputValues.slice(0, newInputCount));\r\n        } else if (newInputCount > inputCount) {\r\n            setInputValues(prevInputValues => [...prevInputValues, ...new Array(newInputCount - inputCount).fill('')]);\r\n        }\r\n\r\n        setInputCount(event.target.value);\r\n        const newInputs = [];\r\n        for(let i = 0; i < event.target.value; i++) {\r\n            newInputs.push(\r\n                <input \r\n                  key={i} \r\n                  type=\"text\" \r\n                  name='generateInputs' \r\n                  onChange={event => {\r\n                    const newValue = event.target.value;\r\n                    setInputValues(prevInputValues => {\r\n                      const newInputValues = [...prevInputValues];\r\n                      newInputValues[i] = { name: newValue };\r\n                      return newInputValues;\r\n                    });\r\n                  }}\r\n                />\r\n              );\r\n        }\r\n        setInputs(newInputs);\r\n    }\r\n\r\n    const handleConfirmation = async(event) => {\r\n        event.preventDefault();\r\n\r\n        if(!selectedCategory || !isChecked){\r\n            alert('Todos los campos son obligatorios');\r\n        }\r\n\r\n        else if(inputCount === \"0\"){\r\n            alert('Ingrese la cantidad de subcategorías');\r\n        }\r\n\r\n        else if(checkInputValues()){\r\n            alert('Todos los campos son obligatorios');\r\n        }\r\n\r\n        else{\r\n            let result = await createCategory(selectedCategory, inputValues);\r\n            if (result.status === 200) {\r\n                alert(\"Categoría creada con éxito\");\r\n                navigate('/account/manageCategories');\r\n            } else {\r\n                alert(\"ERROR: No se pudo crear la publicación\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const createCategory = async (pCategory, pSubcategories) => {\r\n\r\n        // get id\r\n        const currentId = await fetch('http://localhost:5000/category/get/id', {\r\n            method: 'GET',\r\n        }).then(res => res.json());\r\n\r\n        // update the id\r\n        const nextId = await fetch('http://localhost:5000/category/update/id', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }, body: JSON.stringify({\r\n                id: currentId + 1\r\n            })\r\n        });\r\n\r\n        // create the category\r\n        const response = await fetch('http://localhost:5000/category/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                id: currentId,\r\n                name: pCategory,\r\n                subCategories: pSubcategories\r\n            })\r\n        });\r\n\r\n        return response;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1 name='categoryTitle'>Crear Categoría</h1>\r\n            <label name='categoryLabel'>Nombre</label>\r\n            <br />\r\n            <input type='text' name='nameCategory' value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)}/>\r\n            <br />\r\n            <label name='categoryLabel'>\r\n                <input type=\"checkbox\" name='subcategoryCheckBox' checked={isChecked} onChange={Check} />\r\n                &nbsp;Agregar subcategoría\r\n            </label>\r\n            <br />\r\n            {\r\n                isChecked && \r\n                        <div>\r\n                            <label name='categoryLabel'>\r\n                                Cantidad de subcategorías: \r\n                                &nbsp;<input type=\"number\" min=\"0\" name='numberInput' value={inputCount} onChange={handleInputChange} />\r\n                            </label>\r\n                            <br />\r\n                            {inputs}\r\n                        </div> \r\n            }\r\n            <br />\r\n            <button name='categoryOption' onClick={handleConfirmation}>Crear</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction CreateCategory(){\r\n    return(\r\n        <div>\r\n            <Navbar showIcons={false} />\r\n            <div className='createCategory'>\r\n                <BackAccount />\r\n                <InfoCategory/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateCategory;","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\accountPages\\ModifyAccount.js",["177","178"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; \r\nimport '../../styles/Account.css';\r\nimport backButton from '../../components/assets/back.png'\r\nimport Navbar from \"../../components/Navbar\" \r\n\r\nexport function BackAccount( { account } ){\r\n    const navigate = useNavigate();\r\n\r\n    const accountPage = () => {\r\n        if(account.admin === true){\r\n            navigate('/accountAdmin');\r\n        }else{\r\n            navigate('/accountUser');\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div className=\"back\"> \r\n            <a onClick={accountPage}><img src={backButton} alt=\"\"/></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function UpdateAccount( { account, setAccount } ){\r\n    let username = localStorage.getItem('username');\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const navigate = useNavigate();\r\n\r\n    const getAccount = async() => {\r\n        const response = await fetch('http://localhost:5000/getAccount',{\r\n          method: 'GET',\r\n          headers : {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': username \r\n          }\r\n        });\r\n    \r\n        if(response.ok){\r\n          const data = await response.json();\r\n          setAccount(data.account);\r\n        }\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        getAccount();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setEmail(account.email);\r\n        setPassword(account.password);\r\n    }, [account]);\r\n\r\n    \r\n    const handleInputChange = (name, value) => {\r\n        if(name === \"email\"){\r\n            setEmail(value)\r\n        }\r\n        else if(name === \"password\"){\r\n            setPassword(value)\r\n        }\r\n    }\r\n\r\n    const updateAccount = async(pUser, pPassword, pEmail) => {\r\n        const response = await fetch('http://localhost:5000/updateAccount',{\r\n            method: 'PATCH',\r\n            headers : {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: pUser,\r\n                password: pPassword,\r\n                email: pEmail,\r\n                admin: false\r\n            })\r\n        })\r\n\r\n        if(response.ok) {\r\n            const data = await response.text();\r\n            alert('Cuenta actualizada con éxito', data);\r\n            \r\n            if(account.admin === true){\r\n                navigate('/accountAdmin');\r\n            }else{\r\n                navigate('/accountUser');\r\n            }\r\n        }\r\n    }\r\n\r\n    const updateData = (event) =>{\r\n        event.preventDefault();\r\n        if(password === \"\" || email === \"\"){\r\n            alert(\"ERROR: Todos los campos son obligatorios\");\r\n            return;\r\n        }else{\r\n\r\n            const regexEmail = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n            if(regexEmail.test(email) === false){\r\n                alert(\"ERROR: Por favor ingresar un correo válido\");\r\n                return;\r\n            }\r\n\r\n            const regexPassword = /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#%&])/;\r\n            if(password.length < 8 || regexPassword.test(password) === false){\r\n                alert(\"ERROR: Por favor ingresar una contraseña minimo de 8 digitos con al menos una letra, número y caracter especial\");\r\n                return;\r\n            }\r\n            \r\n            updateAccount(username, password, email);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form>\r\n                <h1>Modificar Cuenta</h1>\r\n                <label>Usuario</label><br />\r\n                <input type='text' name='username' disabled={true} value={account.username}/>\r\n                <br />\r\n                <label>Correo electrónico</label><br />\r\n                <input\r\n                    type='email'\r\n                    value={email}\r\n                    onChange={(e) => handleInputChange(e.target.name, e.target.value)}\r\n                    name='email'\r\n                /><br />\r\n                <label>Contraseña</label>\r\n                <br />\r\n                <input\r\n                    type='password'\r\n                    value={password}\r\n                    onChange={(e) => handleInputChange(e.target.name, e.target.value)}\r\n                    name='password'\r\n                /><br />\r\n                <br />\r\n                <button onClick={updateData}>Guardar cambios</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction ModifyAccount() {\r\n    const [account, setAccount] = useState({});\r\n\r\n    return (\r\n        <div>\r\n            <Navbar showIcons={false} />\r\n            <div className=\"modifyAccount\">\r\n                <BackAccount account={account}/>\r\n                <UpdateAccount account={account} setAccount={setAccount}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModifyAccount;","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\accountPages\\ManageAdmin.js",[],[],"C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\productPages\\ProductManagement.js",["179"],[],"import React, { useState, useEffect} from \"react\";\r\nimport \"../../styles/Product.css\";\r\nimport Navbar from \"../../components/Navbar\";\r\nimport Carousel from 'react-multi-carousel';\r\nimport 'react-multi-carousel/lib/styles.css';\r\n\r\nimport trash from \"../../components/assets/trash.png\";\r\nimport back from \"../../components/assets/arrowBack.png\";\r\n\r\n// BUTTONS -----------------------------------------------------------------\r\nexport function Back(){\r\n    return(\r\n        <div className=\"buttonBack\"> \r\n            <a href=\"/AccountAdmin\"><img src={back} alt=\"\"/></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function OpenModifyProduct(pId){\r\n    return(\r\n        <div> \r\n            <a href={\"/ModifyProduct/\"+ pId.pId}><button className=\"buttonModify\">Modificar</button></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function OpenDeleteProduct(pId){\r\n    const baseAPIurl = 'http://localhost:5000';\r\n    const handleConfirmation = async() => {\r\n        if (window.confirm(\"¿Está seguro que desea eliminar esta producto?\")) {\r\n            window.location.href = \"/ProductManagement\";\r\n            const response = await fetch(baseAPIurl + '/products/delete', {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    id: pId.pId\r\n                })\r\n            }).then(res => res.json());\r\n        }\r\n    }\r\n    return(\r\n        <div> \r\n            <button className=\"buttonDelete\" onClick={handleConfirmation}><img src={trash} alt=\"\"/></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function OpenCreateProduct(){\r\n    return(\r\n        <div> \r\n            <a href=\"/CreateProduct\"><button className=\"buttonCreate\">Crear nuevo producto</button></a>\r\n        </div>\r\n    )\r\n}\r\n\r\n// FUNCTIONS -----------------------------------------------------------------\r\nfunction ProductManagement(){\r\n    const responsive = {\r\n        superLargeDesktop: {\r\n            breakpoint: { max: 4000, min: 3000 },\r\n            items: 5\r\n        },\r\n        desktop: {\r\n            breakpoint: { max: 3000, min: 1024 },\r\n            items: 3\r\n        },\r\n        tablet: {\r\n            breakpoint: { max: 1024, min: 464 },\r\n            items: 2\r\n        },\r\n        mobile: {\r\n            breakpoint: { max: 464, min: 0 },\r\n            items: 1\r\n        }\r\n    };\r\n\r\n    const baseAPIurl = 'http://localhost:5000';\r\n    const [products, setProducts] = useState([]);\r\n\r\n    const getProducts = async () => {\r\n        const response = await fetch(baseAPIurl + '/products/get/all', {\r\n            method: 'GET',\r\n        }).then(res => res.json());\r\n        setProducts(response);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getProducts();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar showIcons={true} />\r\n            <div className=\"pageProductManagement\">\r\n                <Back />\r\n                <h1>Gestión de productos</h1>\r\n                <OpenCreateProduct />\r\n                <div className=\"containerProductManagement\">\r\n                    <Carousel responsive={responsive}>\r\n                        {products.map((product) => (\r\n                            <div className=\"cardProductManagement\" key={product.id}>\r\n                                <OpenDeleteProduct pId = {product.id}/>\r\n                                <div className=\"content\">\r\n                                    <div className=\"imageContent\">\r\n                                        <div className=\"cardImage\">\r\n                                            <img src={product.imageURL} alt=\"\"/>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"cardContent\">\r\n                                        <div className=\"names\">{product.name}</div>\r\n                                        <div className=\"description\">{product.description}</div>\r\n                                        <OpenModifyProduct pId = {product.id}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </Carousel>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProductManagement;","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\productPages\\ModifyProduct.js",["180","181"],[],"import React from \"react\";\r\nimport { useRef , useState, useEffect } from 'react';\r\nimport \"../../styles/Product.css\";\r\nimport Navbar from \"../../components/Navbar\";\r\nimport back from \"../../components/assets/arrowBack.png\";\r\nimport {Link} from 'react-router-dom';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport 'primereact/resources/themes/saga-blue/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport imagePlaceholder from '../../components/assets/imagePlaceHolder.png';\r\n\r\nfunction ModifyProduct() {\r\n    let { id } = useParams();\r\n    // VARIABLES -----------------------------------------------------------------\r\n    const navigate = useNavigate();    \r\n    const hiddenFileInput = useRef(null);\r\n    const baseAPIurl = 'http://localhost:5000';\r\n\r\n    const [selectedName, setSelectedName] = useState('');\r\n    const [selectedDescription, setSelectedDescription] = useState('');\r\n    const [selectedPrice, setSelectedPrice] = useState(0);\r\n    const [selectedAvailable, setSelectedAvailable] = useState(0);\r\n    const [blobImage, setBlobImage] = useState('NotUploaded');\r\n    const [imageURL, setImageURL] = useState('');\r\n    const [pImagePath, setPImagePath] = useState('');\r\n    const [selectedImage, setImage] = useState(imagePlaceholder);\r\n    const [selectedCategory, setSelectedCategory] = useState('');\r\n    const [selectedSubcategory, setSelectedSubcategory] = useState('');\r\n    const [categories, setCategories] = useState([]);\r\n    const [parsedCategories, setParsedCategories] = useState([]);\r\n    const [subcategories, setSubcategories] = useState([]);\r\n\r\n    // FUNCTIONS -----------------------------------------------------------------\r\n\r\n    const getCategories = async () => {\r\n        const response = await fetch(baseAPIurl + '/category/all', {\r\n            method: 'GET',\r\n        }).then(res => res.json());\r\n        setCategories(response);\r\n        let categorylist = [];\r\n        for (let i = 0; i < response.length; i++) {\r\n            categorylist.push(response[i].name);\r\n        }\r\n        setParsedCategories(categorylist);\r\n    }\r\n\r\n    const getSubcategories = (pCategory) => {\r\n        let subcategorylist = [];\r\n        for (let i = 0; i < categories.length; i++) {\r\n            if (categories[i].name === pCategory) {\r\n                for (let j = 0; j < categories[i].subCategories.length; j++) {\r\n                    subcategorylist.push(categories[i].subCategories[j].name);\r\n                }\r\n            }\r\n        }\r\n        setSubcategories(subcategorylist);\r\n    }\r\n\r\n    const getProduct = async () => {\r\n        const response = await fetch(baseAPIurl + '/products/get/' + id, {\r\n            method: 'GET'\r\n        }).then(res => res.json());\r\n        return response;\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCategories();\r\n        let productVar = getProduct().then(res => {\r\n            setSelectedName(res.name);\r\n            console.log(res.name);\r\n            setSelectedDescription(res.description);\r\n            setImage(res.imageURL);\r\n            setPImagePath(res.imagePath);\r\n            setImageURL(res.imageURL);\r\n            setSelectedPrice(res.price);\r\n            setSelectedAvailable(res.available);\r\n        });\r\n    }, []);\r\n\r\n    const handleClickImage = (event) => {\r\n        hiddenFileInput.current.click();\r\n    };\r\n\r\n    const handleChangeImage = (event) => {\r\n        const fileUploaded = event.target.files;\r\n        if (fileUploaded[0]) {\r\n            setImage(URL.createObjectURL(fileUploaded[0]));\r\n            setBlobImage(fileUploaded[0]);\r\n        }\r\n    };\r\n\r\n    const handleProduct = async(event) => {\r\n        event.preventDefault();\r\n\r\n        if (!selectedName || !selectedDescription || !selectedPrice || !selectedAvailable || !selectedCategory || !selectedSubcategory || !selectedImage) {\r\n            alert(\"ERROR: Todos los campos son obligatorios\");\r\n            return;\r\n        }\r\n\r\n        if (selectedDescription.length > 122) {\r\n            alert(\"ERROR: La descripción es muy larga, el máximo es 122 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedDescription.length < 28) {\r\n            alert(\"ERROR: La descripción es muy corta, el mínimo es 28 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedName.length > 22) {\r\n            alert(\"ERROR: El nombre es muy largo, el máximo es 22 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedDescription.length < 3) {\r\n            alert(\"ERROR: La descripción es muy corta, el mínimo es 3 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (!/^\\d+$/.test(selectedAvailable)){\r\n            alert(\"ERROR: El número de productos disponibles debe ser un número entero\");\r\n            return;\r\n        }\r\n\r\n        if(!/^\\d+(\\.\\d+)?$/.test(selectedPrice)){\r\n            alert(\"ERROR: El precio debe ser un número entero o decimal\");\r\n            return;\r\n        }\r\n\r\n        if(selectedImage === null){\r\n            alert(\"ERROR: Debe seleccionar una imagen\");\r\n            return;\r\n        }\r\n        let result = await modifyProduct();\r\n        if (result.status === 200) {\r\n            alert(\"Producto modificado con éxito\");\r\n            navigate('/ProductManagement');\r\n        } else {\r\n            alert(\"ERROR: No se pudo modificar el producto\");\r\n        }\r\n    };\r\n\r\n    const modifyProduct = async() => {\r\n        if (blobImage !== 'NotUploaded') {\r\n            console.log('entro');\r\n            let formData = new FormData();\r\n            formData.append('image', blobImage)\r\n\r\n            const uploadImage = await fetch(baseAPIurl + '/image/upload/products/' + id.toString(), {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: formData\r\n            }).then(res => res.json());\r\n            setImageURL(uploadImage.imageURL);\r\n        }\r\n\r\n        console.log(id);\r\n        console.log(selectedName);\r\n        console.log(selectedDescription);\r\n        console.log(pImagePath);\r\n        console.log(selectedCategory);\r\n        console.log(selectedSubcategory);\r\n        console.log(selectedPrice);\r\n        console.log(selectedAvailable);\r\n        console.log(imageURL);\r\n\r\n        const newData = await fetch(baseAPIurl + '/products/update',{\r\n            method: 'PUT',\r\n            headers : {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                id: id,\r\n                name: selectedName,\r\n                description: selectedDescription,\r\n                imagePath: pImagePath,\r\n                category: selectedCategory,\r\n                subCategory: selectedSubcategory,\r\n                price: selectedPrice,\r\n                available: selectedAvailable,\r\n                imageURL: imageURL\r\n            })\r\n        });\r\n        return newData;\r\n    }\r\n\r\n    // RETURN -----------------------------------------------------------------\r\n    return (\r\n        <div className=\"ModifyCreateProduct\">\r\n            <Navbar showIcons={true} />\r\n            <Link to={\"/ProductManagement\"}><button className=\"backManagement\"><img src={back} alt=\"\"/></button></Link>\r\n            <h1>Modificar Producto</h1>\r\n            \r\n            <section className=\"layoutModifyCreateProduct\">\r\n                <div className=\"gridPosition\">\r\n                    <label>Nombre</label><br />\r\n                    <input value={selectedName} onChange={(e) => setSelectedName(e.target.value)} type=\"text\" id=\"nameProduct\" name=\"name\"/><br />\r\n                \r\n                    <label>Descripción</label><br />\r\n                    <textarea value={selectedDescription} onChange={(e) => setSelectedDescription(e.target.value)} type=\"text\" id=\"descriptionProduct\" name=\"description\"/><br />\r\n\r\n                    <button type=\"submit\" className=\"buttonModifyCreateProduct\" onClick={handleProduct}>Modificar producto</button>\r\n                </div>\r\n                <div>\r\n                    <label>Precio</label><br />\r\n                    <input value={selectedPrice} onChange={(e) => setSelectedPrice(e.target.value)} type=\"number\" min=\"0\" id=\"priceProduct\" name=\"price\"/><br />\r\n\r\n                    <label>Disponibles</label><br />\r\n                    <input value={selectedAvailable} onChange={(e) => setSelectedAvailable(e.target.value)} type=\"number\" min=\"0\" id=\"availableProduct\" name=\"available\"/><br />\r\n\r\n                    <label>Categoría</label><br />\r\n                    <Dropdown value={selectedCategory} onChange={(e) => { setSelectedCategory(e.target.value); getSubcategories(e.target.value); }} options={parsedCategories} placeholder=\"Seleccione una opción\" className=\"options\" />\r\n                    <br />\r\n\r\n                    <label>Subcategoría</label><br />\r\n                    <Dropdown value={selectedSubcategory} onChange={(e) => setSelectedSubcategory(e.target.value)} options={subcategories} placeholder=\"Seleccione una opción\" className=\"options\" />\r\n                    <br />\r\n                \r\n                </div>\r\n                <div>\r\n                    <img src={selectedImage} alt=\"\" name=\"image\"/>\r\n                    <button className=\"buttonLoadImage\" type=\"button\" onClick={handleClickImage}>Cargar imagen</button>\r\n                    <input type=\"file\" onChange={handleChangeImage} ref={hiddenFileInput} style={{display: \"none\"}}/>\r\n                </div>\r\n            </section>       \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModifyProduct;","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\publicationPages\\ModifyPublication.js",["182","183"],[],"import React, { useRef, useState, useEffect } from 'react';\r\nimport \"../../styles/Publications.css\";\r\nimport Navbar from \"../../components/Navbar\";\r\nimport back from \"../../components/assets/arrowBack.png\";\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Link } from 'react-router-dom';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport imagePlaceholder from '../../components/assets/imagePlaceHolder.png';\r\n\r\nfunction ModifyPublication() {\r\n    let { id } = useParams();\r\n    // VARIABLES -----------------------------------------------------------------\r\n    const navigate = useNavigate();\r\n    const hiddenFileInput = useRef(null);\r\n    const baseAPIurl = 'http://localhost:5000';\r\n\r\n    const [selectedName, setSelectedName] = useState('');\r\n    const [selectedDescription, setSelectedDescription] = useState('');\r\n    const [selectedTags, setSelectedTags] = useState('');\r\n    const [blobImage, setBlobImage] = useState('NotUploaded');\r\n    const [selectedImage, setImage] = useState(imagePlaceholder);\r\n    const [selectedCategory, setSelectedCategory] = useState('');\r\n    const [selectedSubcategory, setSelectedSubcategory] = useState('');\r\n    const [categories, setCategories] = useState([]);\r\n    const [parsedCategories, setParsedCategories] = useState([]);\r\n    const [subcategories, setSubcategories] = useState([]);\r\n    const [imageURL, setImageURL] = useState('');\r\n    const [pDate, setPDate] = useState('');\r\n    const [pImagePath, setPImagePath] = useState('');\r\n\r\n    // FUNCTIONS -----------------------------------------------------------------\r\n    const getCategories = async () => {\r\n        const response = await fetch(baseAPIurl + '/category/all', {\r\n            method: 'GET',\r\n        }).then(res => res.json());\r\n        setCategories(response);\r\n        let categorylist = [];\r\n        for (let i = 0; i < response.length; i++) {\r\n            categorylist.push(response[i].name);\r\n        }\r\n        setParsedCategories(categorylist);\r\n    }\r\n\r\n    const parseTags = (pTags) => {\r\n        let parsedTags = '';\r\n        for (let i = 0; i < pTags.length; i++) {\r\n            parsedTags += '#' + pTags[i];\r\n        }\r\n        setSelectedTags(parsedTags);\r\n    }\r\n\r\n    const getSubcategories = (pCategory) => {\r\n        let subcategorylist = [];\r\n        for (let i = 0; i < categories.length; i++) {\r\n            if (categories[i].name === pCategory) {\r\n                for (let j = 0; j < categories[i].subCategories.length; j++) {\r\n                    subcategorylist.push(categories[i].subCategories[j].name);\r\n                }\r\n            }\r\n        }\r\n        setSubcategories(subcategorylist);\r\n    }\r\n\r\n    const getPublication = async () => {\r\n        const response = await fetch(baseAPIurl + '/publications/get/' + id, {\r\n            method: 'GET'\r\n        }).then(res => res.json());\r\n        return response;\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCategories();\r\n        let publicationVar = getPublication().then(res => {\r\n            setSelectedName(res.name);\r\n            setSelectedDescription(res.description);\r\n            parseTags(res.tags);\r\n            setImage(res.imageURL);\r\n            setPDate(res.date);\r\n            setPImagePath(res.imagePath);\r\n            setImageURL(res.imageURL);\r\n        });\r\n    }, []);\r\n\r\n    const handleClickImage = (event) => {\r\n        hiddenFileInput.current.click();\r\n    };\r\n\r\n    const handleChangeImage = (event) => {\r\n        const fileUploaded = event.target.files;\r\n        if (fileUploaded[0]) {\r\n            setImage(URL.createObjectURL(fileUploaded[0]));\r\n            setBlobImage(fileUploaded[0]);\r\n        }\r\n    };\r\n\r\n    const handlePublication = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!selectedName || !selectedDescription || !selectedTags || !selectedCategory || !selectedSubcategory || !selectedImage) {\r\n            alert(\"ERROR: Todos los campos son obligatorios\");\r\n            return;\r\n        }\r\n\r\n        if (selectedDescription.length > 122) {\r\n            alert(\"ERROR: La descripción es muy larga, el máximo es 122 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedDescription.length < 28) {\r\n            alert(\"ERROR: La descripción es muy corta, el mínimo es 28 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedName.length > 22) {\r\n            alert(\"ERROR: El nombre es muy largo, el máximo es 22 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedDescription.length < 3) {\r\n            alert(\"ERROR: La descripción es muy corta, el mínimo es 3 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedImage === imagePlaceholder) {\r\n            alert(\"ERROR: Debe seleccionar una imagen\");\r\n            return;\r\n        }\r\n        let result = await modifyPublication(selectedName, selectedDescription, selectedTags, selectedCategory, selectedSubcategory);\r\n        if (result.status === 200) {\r\n            alert(\"Publicación modificada con éxito\");\r\n            navigate('/PublicationManagement');\r\n        } else {\r\n            alert(\"ERROR: No se pudo modificar la publicación\");\r\n        }\r\n    };\r\n\r\n    const modifyPublication = async (pName, pDescription, pTags, pCategory, pSubcategory) => {\r\n        if (blobImage !== 'NotUploaded') {\r\n            console.log('entro');\r\n            let formData = new FormData();\r\n            formData.append('image', blobImage)\r\n\r\n            const uploadImage = await fetch(baseAPIurl + '/image/upload/publications/' + id.toString(), {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: formData\r\n            }).then(res => res.json());\r\n            setImageURL(uploadImage.imageURL);\r\n        }\r\n\r\n        console.log(id);\r\n        console.log(pName);\r\n        console.log(pDescription);\r\n        console.log(pImagePath);\r\n        console.log(pDate);\r\n        console.log(pTags.split(/[# ,]+/).map((tag) => tag.trim()).slice(1));\r\n        console.log(pCategory);\r\n        console.log(pSubcategory);\r\n        console.log(imageURL);\r\n\r\n\r\n        const newData = await fetch('http://localhost:5000/publications/update', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                id: id,\r\n                name: pName,\r\n                description: pDescription,\r\n                imagePath: pImagePath,\r\n                date: pDate,\r\n                tags: pTags.split(/[# ,]+/).map((tag) => tag.trim()).slice(1),\r\n                category: pCategory,\r\n                subCategory: pSubcategory,\r\n                imageURL: imageURL\r\n            })\r\n        });\r\n\r\n        return newData;\r\n    }\r\n\r\n    // RETURN -----------------------------------------------------------------\r\n    return (\r\n        <div className=\"ModifyCreatePublication\">\r\n            <Navbar showIcons={true} />\r\n            <Link to={\"/PublicationManagement\"}><button className=\"backManagementPublication\"><img src={back} alt=\"\" /></button>\r\n            </Link>\r\n            <h1>Modificar Publicación</h1>\r\n\r\n            <section className=\"layoutModifyCreatePublication\">\r\n                <div className=\"gridPosition\">\r\n                    <label>Nombre</label><br />\r\n                    <input value={selectedName} onChange={(e) => setSelectedName(e.target.value)} type=\"text\" id=\"namePublication\" name=\"name\" /><br />\r\n\r\n                    <label>Descripción</label><br />\r\n                    <textarea value={selectedDescription} onChange={(e) => setSelectedDescription(e.target.value)} type=\"text\" id=\"descriptionPublication\" name=\"description\" /><br />\r\n\r\n                    <button type=\"submit\" className=\"buttonModifyCreatePublication\" onClick={handlePublication}>Modificar publicación</button>\r\n                </div>\r\n                <div>\r\n                    <label>Tags</label><br />\r\n                    <input value={selectedTags} onChange={(e) => setSelectedTags(e.target.value)} type=\"text\" id=\"tagsPublication\" name=\"tags\" /><br />\r\n\r\n                    <label>Categoría</label><br />\r\n                    <Dropdown value={selectedCategory} onChange={(e) => { setSelectedCategory(e.target.value); getSubcategories(e.target.value); }} options={parsedCategories} placeholder=\"Seleccione una opción\" className=\"options\" />\r\n                    <br />\r\n\r\n                    <label>Subcategoría</label><br />\r\n                    <Dropdown value={selectedSubcategory} onChange={(e) => setSelectedSubcategory(e.target.value)} options={subcategories} placeholder=\"Seleccione una opción\" className=\"options\" />\r\n                    <br />\r\n                </div>\r\n                <div>\r\n                    <img src={selectedImage} alt=\"\" name=\"image\" />\r\n                    <button className=\"buttonLoadImage\" type=\"button\" onClick={handleClickImage}>Cargar imagen</button>\r\n                    <input type=\"file\" onChange={handleChangeImage} ref={hiddenFileInput} style={{ display: \"none\" }} />\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModifyPublication;\r\n","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\accountPages\\AccountAdmin.js",["184"],[],"C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\accountPages\\AccountUser.js",["185"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; \r\nimport Navbar from \"../../components/Navbar\" \r\nimport '../../styles/Account.css'\r\nimport paletteColors from '../../components/assets/paletteColors.png'\r\n\r\n\r\nexport function InfoAccount(){\r\n  const navigate = useNavigate();\r\n  const [ account, setAccount] = useState({});\r\n  let username = localStorage.getItem('username');\r\n  \r\n  const ModifyAccountPage = () => {\r\n    navigate('/account/modifyAccount');\r\n  };\r\n\r\n  const DeleteAccountPage = () => {\r\n    navigate('/account/deleteAccount');\r\n  };\r\n\r\n  const backPage = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const getAccount = async() => {\r\n    const response = await fetch('http://localhost:5000/getAccount',{\r\n      method: 'GET',\r\n      headers : {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'Authorization': username \r\n      }\r\n    });\r\n\r\n    if(response.ok){\r\n      const data = await response.json();\r\n      console.log(\"Cuenta recibida\", data);\r\n      setAccount(data.account);\r\n    }\r\n    \r\n  }\r\n\r\n  useEffect(() => {\r\n    getAccount();\r\n  }, []);\r\n\r\n  return(\r\n    <div className='infoAccount'> \r\n      <h2>Información</h2>\r\n      <label>Usuario: {account.username}</label><br />\r\n      <br />\r\n      <label>Email: {account.email}</label><br />\r\n      <br />\r\n      <button name=\"Update\" onClick={ModifyAccountPage}>Modificar datos</button>\r\n      <br />\r\n      <br />\r\n      <button name=\"Delete\" onClick={DeleteAccountPage}>Eliminar cuenta</button>\r\n      <br />\r\n      <br />\r\n      <button name=\"Delete\" onClick={backPage}>Volver</button>\r\n</div>\r\n  )\r\n}\r\n\r\nexport function MenuUser(){\r\n  const navigate = useNavigate();\r\n  \r\n  const HomePage = () => {\r\n    console.log(\"CIERRE SESION\");\r\n    localStorage.removeItem('username');\r\n    navigate('/');\r\n  };\r\n\r\n  const PurchasesPage = () => {\r\n    navigate('/MyPurchases');\r\n  };\r\n\r\n  return(\r\n    <div className='menuUser'>\r\n      <h2>Bienvenido/a</h2>\r\n      <button name= \"Purchases\" onClick={PurchasesPage}>Ver mis compras</button><br />\r\n      <br />\r\n      <button name=\"LogOut\" onClick={HomePage}>Cerrar Sesión</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nfunction AccountUser(){  \r\n    return(\r\n      <div>\r\n         <Navbar showIcons={false} /> \r\n         <div className='AccountUser'>\r\n            <img src={paletteColors} alt=\"\" />\r\n            <div style={{display: 'flex', justifyContent: 'flex-start'}}>\r\n              <InfoAccount />\r\n              <MenuUser />\r\n            </div>\r\n        </div> \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default AccountUser;\r\n\r\n","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\accountPages\\DeleteAccount.js",["186","187"],[],"import React, { useState, useEffect } from 'react';\r\nimport '../../styles/Account.css';\r\nimport Navbar from \"../../components/Navbar\" \r\nimport backButton from '../../components/assets/back.png'\r\nimport { useNavigate } from 'react-router-dom'; \r\n\r\nexport function BackAccount( { account } ){\r\n  const navigate = useNavigate();\r\n\r\n  const accountPage = () => {\r\n      if(account.admin === true){\r\n          navigate('/accountAdmin');\r\n      }else{\r\n          navigate('/accountUser');\r\n      }\r\n  };\r\n\r\n  return(\r\n      <div className='back'> \r\n          <a onClick={accountPage}><img src={backButton} alt=\"\"/></a>\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport function RemoveAccount({ account, setAccount }) {\r\n  let username = localStorage.getItem('username');\r\n  const navigate = useNavigate();\r\n\r\n  const getAccount = async() => {\r\n    const response = await fetch('http://localhost:5000/getAccount',{\r\n      method: 'GET',\r\n      headers : {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'Authorization': username \r\n      }\r\n    });\r\n\r\n    if(response.ok){\r\n      const data = await response.json();\r\n      console.log(\"Cuenta recibida\", data);\r\n      setAccount(data.account);\r\n    }\r\n    \r\n  }\r\n\r\n  useEffect(() => {\r\n    getAccount();\r\n  }, []);\r\n\r\n  const confirmRemove = async() => {\r\n    const response = await fetch('http://localhost:5000/deleteAccount',{\r\n        method: 'DELETE',\r\n        headers : {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            username: username\r\n        })\r\n    })\r\n\r\n    if(response.ok) {\r\n      const data = await response.text();\r\n      localStorage.removeItem('username');\r\n      alert('Cuenta eliminada con éxito', data);\r\n      navigate('/');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='infoDelete'>\r\n      <h1>¿En verdad desea eliminar la cuenta?</h1>\r\n      <br />\r\n      <br />\r\n      <button onClick={confirmRemove}>Confirmar</button>\r\n    </div> \r\n  );\r\n}\r\n\r\n\r\nfunction DeleteAccount(){\r\n  const [account, setAccount] = useState({});\r\n  return (\r\n    <div>\r\n        <Navbar showIcons={false} />\r\n        <div className=\"deleteAccount\">\r\n            <BackAccount account={account}/>\r\n            <RemoveAccount account={account} setAccount={setAccount}/>\r\n        </div>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default DeleteAccount;","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\publicationPages\\PublicationManagement.js",["188","189"],[],"import React, { useEffect, useState } from \"react\";\r\nimport \"../../styles/Publications.css\";\r\nimport Navbar from \"../../components/Navbar\";\r\nimport Carousel from 'react-multi-carousel';\r\nimport 'react-multi-carousel/lib/styles.css';\r\n\r\nimport trash from \"../../components/assets/trash.png\";\r\nimport back from \"../../components/assets/arrowBack.png\";\r\n\r\n// BUTTONS -----------------------------------------------------------------\r\nfunction Back() {\r\n    return (\r\n        <div className=\"buttonBack\">\r\n            <a href=\"/AccountAdmin\"><img src={back} alt=\"\" /></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction OpenModifyPublication(pId) {\r\n    return (\r\n        <div>\r\n            <a href={\"/ModifyPublication/\"+ pId.pId}><button className=\"buttonModifyPublication\">Modificar</button></a>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction OpenDeletePublication(pId) {\r\n    const baseAPIurl = 'http://localhost:5000';\r\n    const handleConfirmation = async() => {\r\n        if (window.confirm(\"¿Está seguro que desea eliminar esta publicación?\")) {\r\n            window.location.href = \"/PublicationManagement\";\r\n            const response = await fetch(baseAPIurl + '/publications/delete', {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    id: pId.pId\r\n                })\r\n            }).then(res => res.json());\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <button className=\"buttonDeletePublication\" onClick={handleConfirmation}><img src={trash} alt=\"\" /></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction OpenCreatePublication() {\r\n    return (\r\n        <div>\r\n            <a href=\"/CreatePublication\"><button className=\"buttonCreatePublication\">Crear nueva publicación</button></a>\r\n        </div>\r\n    )\r\n}\r\n\r\n// FUNCTIONS -----------------------------------------------------------------\r\nfunction PublicationManagement() {\r\n    const baseAPIurl = 'http://localhost:5000';\r\n\r\n    const responsive = {\r\n        superLargeDesktop: {\r\n            breakpoint: { max: 4000, min: 3000 },\r\n            items: 5\r\n        },\r\n        desktop: {\r\n            breakpoint: { max: 3000, min: 1024 },\r\n            items: 3\r\n        },\r\n        tablet: {\r\n            breakpoint: { max: 1024, min: 464 },\r\n            items: 2\r\n        },\r\n        mobile: {\r\n            breakpoint: { max: 464, min: 0 },\r\n            items: 1\r\n        }\r\n    };\r\n\r\n    const [publications, setPublications] = useState([]);\r\n\r\n    const getPublications = async () => {\r\n        const response = await fetch(baseAPIurl + '/publications/get/all', {\r\n            method: 'GET',\r\n        }).then(res => res.json());\r\n        setPublications(response);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPublications();\r\n    }, []);\r\n\r\n    const test = () => {\r\n        console.log(publications);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar showIcons={true} />\r\n            <div className=\"pagePublicationManagement\">\r\n                <Back />\r\n                <h1>Gestión de publicaciones</h1>\r\n                <OpenCreatePublication />\r\n                <div className=\"containerPublicationManagement\">\r\n                    <Carousel responsive={responsive}>\r\n                        {publications.map((publication) => (\r\n                            <div className=\"cardPublicationManagement\">\r\n                                <OpenDeletePublication pId = {publication.id}/>\r\n                                <div className=\"contentPublication\">\r\n                                    <div className=\"imageContentPublication\">\r\n                                        <div className=\"cardImagePublication\">\r\n                                            <img src={publication.imageURL} alt=\"\" />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"cardContentPublication\">\r\n                                        <div className=\"namesPublication\">{publication.name}</div>\r\n                                        <div className=\"descriptionPublication\">{publication.description}</div>\r\n                                        <OpenModifyPublication pId = {publication.id}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </Carousel>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PublicationManagement;","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\productPages\\ProductScreen.js",["190"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport Navbar from \"../../components/Navbar\";\r\nimport \"../../styles/Product.css\";\r\nimport back from \"../../components/assets/arrowBack.png\";\r\nimport { useNavigate } from 'react-router-dom'; \r\n\r\nexport function BackMain(){\r\n    return(\r\n        <div className=\"backManagement\"> \r\n            <a href=\"/\"><img src={back} alt=\"\"/></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction ProductScreen(){\r\n    let { id } = useParams();\r\n    const [product, setProduct] = useState({});\r\n    const baseAPIurl = 'http://localhost:5000';\r\n    let username = localStorage.getItem('username');\r\n    const [visible, setVisible] = useState(true);\r\n    const [productList, setProductList] = useState({});\r\n    const navigate = useNavigate();\r\n\r\n    const getProduct = async () => {\r\n        const response = await fetch( baseAPIurl + '/products/get/' + id , {\r\n            method: 'GET',\r\n        }).then(res => res.json());\r\n        setProduct(response);\r\n    }\r\n\r\n\r\n    const getCart = async () => {\r\n        const response = await fetch(baseAPIurl + '/shoppingCart/get', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': username\r\n          }\r\n        }).then(res => res.json());\r\n        if(response.products === null || Object.keys(response.products).length === 0){\r\n            console.log(\"array vacio\")\r\n            setProductList([]);\r\n        }else{\r\n            console.log(\"array lleno\")\r\n            setProductList(response.products);\r\n        }\r\n    }\r\n\r\n\r\n    const updateCart = async() =>{\r\n        const response = await fetch(baseAPIurl + '/shoppingCart/update', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: username,\r\n                products: productList\r\n            })\r\n        });\r\n        if(response.ok){\r\n            alert('Agregado con éxito');\r\n        }\r\n    }\r\n\r\n    const addCart = () => {\r\n        console.log(username);\r\n        if(username === '' || username === null){\r\n            navigate('/LoginRegister');\r\n        } else if (product.available === '0'){\r\n            alert(\"No hay más unidades disponibles\");\r\n        } else{\r\n            if(Array.isArray(productList)){\r\n                let productAddedToCart = {\r\n                    id: product.id,\r\n                    quantity: 1,\r\n                    price: product.price,\r\n                    name: product.name,\r\n                    available: product.available,\r\n                    imageURL: product.imageURL\r\n                }\r\n            \r\n                // Busca en el array un producto con el mismo id\r\n                let existingProduct = productList.find(p => p.id === product.id);\r\n\r\n                if(existingProduct){\r\n                    alert(\"Ya agregaste este producto a tu carrito\");\r\n                } else {\r\n                    // Si el producto no existe en el array, lo añades\r\n                    productList.push(productAddedToCart);\r\n                    console.log(\"Nuevo\", productList);\r\n                    updateCart();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const getAccount = async() => {\r\n        const response = await fetch(baseAPIurl + '/getAccount',{\r\n          method: 'GET',\r\n          headers : {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': username \r\n          }\r\n        });\r\n    \r\n        if(response.ok){\r\n          const data = await response.json();\r\n          if(data.account.admin === true){\r\n            setVisible(false);\r\n          }else{\r\n            setVisible(true);\r\n            getCart();\r\n          }\r\n        }\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(username);\r\n        if(username === '' || username === null){\r\n            console.log(\"No hay usuario\");\r\n        }else{\r\n            getAccount();\r\n        }\r\n    }, []);\r\n\r\n    getProduct();\r\n\r\n\r\n    return(\r\n        <div>\r\n            <Navbar showIcons={false} />\r\n            <BackMain />\r\n            <div className=\"pageProductScreen\">\r\n                <section className=\"layout\">\r\n                    <div>\r\n                        <h1>{product.name}</h1>\r\n                        <img src={product.imageURL} alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"infoContainer\">\r\n                        <h2>Descripción: </h2>\r\n                        <p>{product.description}</p>\r\n                        <h2>Precio: </h2>\r\n                        <p>{\"₡ \" + product.price}</p>\r\n                        <h2>Cantidad disponible: </h2>\r\n                        <p>{product.available}</p>\r\n                        {visible && \r\n                        <button className=\"buttonAgregarCarrito\" onClick={addCart}>Agregar al carrito</button>\r\n                        }\r\n                        \r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProductScreen;","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\productPages\\CreateProduct.js",["191"],[],"import React from \"react\";\r\nimport { useRef , useState, useEffect } from 'react';\r\nimport \"../../styles/Product.css\";\r\nimport Navbar from \"../../components/Navbar\";\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport back from \"../../components/assets/arrowBack.png\";\r\nimport imagePlaceholder from '../../components/assets/imagePlaceHolder.png';\r\n\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport 'primereact/resources/themes/saga-blue/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\n\r\nfunction CreateProduct() {\r\n    // VARIABLES -----------------------------------------------------------------\r\n    const navigate = useNavigate();    \r\n    const hiddenFileInput = useRef(null);\r\n    const baseAPIurl = 'http://localhost:5000';\r\n\r\n    const [selectedName, setSelectedName] = useState('');\r\n    const [blobImage, setBlobImage] = useState('-');\r\n    const [selectedDescription, setSelectedDescription] = useState('');\r\n    const [selectedPrice, setSelectedPrice] = useState(0);\r\n    const [selectedAvailable, setSelectedAvailable] = useState(0);\r\n    \r\n    const [selectedImage, setImage] = useState(imagePlaceholder);\r\n    const [selectedCategory, setSelectedCategory] = useState('');\r\n    const [selectedSubcategory, setSelectedSubcategory] = useState('');\r\n\r\n    const [categories, setCategories] = useState([]);\r\n    const [parsedCategories, setParsedCategories] = useState([]);\r\n    const [subcategories, setSubcategories] = useState([]);\r\n\r\n    // FUNCTIONS -----------------------------------------------------------------\r\n    const getCategories = async () => {\r\n        const response = await fetch(baseAPIurl + '/category/all', {\r\n            method: 'GET',\r\n        }).then(res => res.json());\r\n        setCategories(response);\r\n        let categorylist = [];\r\n        for (let i = 0; i < response.length; i++) {\r\n            categorylist.push(response[i].name);\r\n        }\r\n        setParsedCategories(categorylist);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCategories();\r\n    }, []);\r\n\r\n    const getSubcategories = (pCategory) => {\r\n        let subcategorylist = [];\r\n        for (let i = 0; i < categories.length; i++) {\r\n            if (categories[i].name === pCategory) {\r\n                for (let j = 0; j < categories[i].subCategories.length; j++) {\r\n                    subcategorylist.push(categories[i].subCategories[j].name);\r\n                }\r\n            }\r\n        }\r\n        setSubcategories(subcategorylist);\r\n    }\r\n    \r\n    const handleClickImage = (event) => {\r\n        hiddenFileInput.current.click();\r\n    };\r\n\r\n    const handleChangeImage = (event) => {\r\n        const fileUploaded = event.target.files;\r\n        if (fileUploaded[0]) {\r\n            setImage(URL.createObjectURL(fileUploaded[0]));\r\n            setBlobImage(fileUploaded[0]);\r\n        }\r\n    };\r\n\r\n    const handleProduct = async(event) => {\r\n        event.preventDefault();\r\n\r\n        if (!selectedName || !selectedDescription || !selectedPrice || !selectedAvailable || !selectedCategory || !selectedSubcategory || !selectedImage) {\r\n            alert(\"ERROR: Todos los campos son obligatorios\");\r\n            return;\r\n        }\r\n\r\n        if (selectedDescription.length > 122) {\r\n            alert(\"ERROR: La descripción es muy larga, el máximo es 122 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedDescription.length < 28) {\r\n            alert(\"ERROR: La descripción es muy corta, el mínimo es 28 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedName.length > 22) {\r\n            alert(\"ERROR: El nombre es muy largo, el máximo es 22 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedDescription.length < 3) {\r\n            alert(\"ERROR: La descripción es muy corta, el mínimo es 3 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (!/^\\d+$/.test(selectedAvailable)){\r\n            alert(\"ERROR: El número de disponibles debe ser un número entero\");\r\n            return;\r\n        }\r\n\r\n        if(!/^\\d+(\\.\\d+)?$/.test(selectedPrice)){\r\n            alert(\"ERROR: El precio debe ser un número entero o decimal\");\r\n            return;\r\n        }\r\n\r\n        if(selectedImage === imagePlaceholder){\r\n            alert(\"ERROR: Debe seleccionar una imagen\");\r\n            return;\r\n        }\r\n\r\n        let result = await createProduct(selectedName, selectedDescription, selectedCategory, selectedSubcategory, selectedPrice, selectedAvailable);\r\n        if (result.status === 200) {\r\n            alert(\"Producto creado con éxito\");\r\n            navigate('/ProductManagement');\r\n        } else {\r\n            alert(\"ERROR: No se pudo crear el producto\");\r\n        }\r\n\r\n    }\r\n\r\n    const createProduct = async(pName, pDescription, pCategory, pSubcategory, pPrice, pAvailable) => {\r\n        // get id\r\n        const currentId = await fetch(baseAPIurl + '/products/get/id', {\r\n            method: 'GET',\r\n        }).then(res => res.json());\r\n\r\n        // update the id\r\n        const nextId = await fetch(baseAPIurl + '/products/update/id', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }, body: JSON.stringify({\r\n                id: currentId + 1\r\n            })\r\n        });\r\n\r\n        // upload the image\r\n        let formData = new FormData();\r\n        formData.append('image', blobImage)\r\n\r\n        const uploadImage = await fetch(baseAPIurl + '/image/upload/products/' + currentId.toString(), {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            },\r\n            body: formData\r\n        }).then(res => res.json());\r\n\r\n        // save the url of the image\r\n        let imageURL = uploadImage.imageUrl;\r\n\r\n        //define the path of the image\r\n        let imagePath = 'Products/' + currentId.toString();\r\n        \r\n        // create the product\r\n        const newData = await fetch('http://localhost:5000/products/create',{\r\n            method: 'POST',\r\n            headers : {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                id: currentId,\r\n                name: pName,\r\n                description: pDescription,\r\n                imagePath: imagePath,\r\n                category: pCategory,\r\n                subCategory: pSubcategory,\r\n                price: pPrice,\r\n                available: pAvailable,\r\n                imageURL: imageURL\r\n            })\r\n        })\r\n        \r\n        return newData;\r\n    }\r\n\r\n    \r\n\r\n    // RETURN -----------------------------------------------------------------\r\n    return (\r\n        <div className=\"ModifyCreateProduct\">\r\n            <Navbar showIcons={true} />\r\n            <Link to={\"/ProductManagement\"}><button className=\"backManagement\"><img src={back} alt=\"\"/></button></Link>\r\n            <h1>Crear Poducto</h1>\r\n            \r\n            <section className=\"layoutModifyCreateProduct\">\r\n                <div className=\"gridPosition\">\r\n                    <label>Nombre</label><br />\r\n                    <input value={selectedName} onChange={(e) => setSelectedName(e.target.value)} type=\"text\" id=\"nameProduct\" name=\"name\"/><br />\r\n                \r\n                    <label>Descripción</label><br />\r\n                    <textarea value={selectedDescription} onChange={(e) => setSelectedDescription(e.target.value)} type=\"text\" id=\"descriptionProduct\" name=\"description\"/><br />\r\n\r\n                    <button type=\"submit\" className=\"buttonModifyCreateProduct\" onClick={handleProduct}>Crear producto</button>\r\n                </div>\r\n                <div>\r\n                    <label>Precio</label><br />\r\n                    <input value={selectedPrice} onChange={(e) => setSelectedPrice(e.target.value)} type=\"number\" min=\"0\" id=\"priceProduct\" name=\"price\"/><br />\r\n\r\n                    <label>Disponibles</label><br />\r\n                    <input value={selectedAvailable} onChange={(e) => setSelectedAvailable(e.target.value)} type=\"number\" min=\"0\" id=\"availableProduct\" name=\"available\"/><br />\r\n\r\n                    <label>Categoría</label><br />\r\n                    <Dropdown value={selectedCategory} onChange={(e) => {setSelectedCategory(e.target.value); getSubcategories(e.target.value)}} options={parsedCategories} placeholder=\"Seleccione una opción\" className=\"options\" />\r\n                    <br />\r\n\r\n                    <label>Subcategoría</label><br />\r\n                    <Dropdown value={selectedSubcategory} onChange={(e) => setSelectedSubcategory(e.target.value)} options={subcategories} placeholder=\"Seleccione una opción\" className=\"options\" />\r\n                    <br />\r\n                \r\n                </div>\r\n                <div>\r\n                    <img src={selectedImage} alt=\"\" name=\"image\"/>\r\n                    <button className=\"buttonLoadImage\" type=\"button\" onClick={handleClickImage}>Cargar imagen</button>\r\n                    <input type=\"file\" onChange={handleChangeImage} ref={hiddenFileInput} style={{display: \"none\"}}/>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateProduct;","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\publicationPages\\PublicationScreen.js",["192","193","194"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport Navbar from \"../../components/Navbar\";\r\nimport \"../../styles/Product.css\";\r\nimport back from \"../../components/assets/arrowBack.png\";\r\n\r\nexport function BackMainPubli(){\r\n    return(\r\n        <div className=\"backManagementPublication\"> \r\n            <a href=\"/\"><img src={back} alt=\"\"/></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction PublicationScreen(){\r\n    let { id } = useParams();\r\n    const [publication, setPublication] = useState({});\r\n    const [parsedTags, setParsedTags] = useState('');\r\n    const baseAPIurl = 'http://localhost:5000';\r\n    let username = localStorage.getItem('username');\r\n    const [visible, setVisible] = useState(true);\r\n\r\n    const parseTags = () => {\r\n        let parsedTags = '';\r\n        let pTags = publication.tags;\r\n        for (let i = 0; i < pTags.length; i++) {\r\n            parsedTags += '#' + pTags[i] + ' ';\r\n        }\r\n        setParsedTags(parsedTags);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const getPublication = async () => {\r\n            const response = await fetch(baseAPIurl + '/publications/get/' + id , {\r\n                method: 'GET',\r\n            }).then(res => res.json());\r\n            setPublication(response);\r\n        }\r\n        getPublication();\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        if (publication.tags) {\r\n            parseTags();\r\n        }\r\n    }, [publication]);\r\n\r\n\r\n    const getAccount = async() => {\r\n        const response = await fetch('http://localhost:5000/getAccount',{\r\n          method: 'GET',\r\n          headers : {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': username \r\n          }\r\n        });\r\n    \r\n        if(response.ok){\r\n          const data = await response.json();\r\n          if(data.account.admin === true){\r\n            setVisible(false);\r\n          }else{\r\n            setVisible(true);\r\n          }\r\n        }\r\n        \r\n      }\r\n\r\n    useEffect(() => {\r\n        if(username === '' || username === null){\r\n            \r\n        }else{\r\n            getAccount();\r\n        }\r\n    }, []);\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <Navbar showIcons={false} />\r\n            <BackMainPubli />\r\n            <div className=\"pagePublicationScreen\">\r\n                <section className=\"layout\">\r\n                    <div>\r\n                        <h1>{publication.name}</h1>\r\n                        <img src={publication.imageURL} alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"infoContainerPublication\">\r\n                        <h2>Descripción: </h2>\r\n                        <p>{publication.description}</p>\r\n                        <h2>Fecha: </h2>\r\n                        <p>{publication.date}</p>\r\n                        <h2>Tags: </h2>\r\n                        <div className=\"tagsPublication\">\r\n                            <p>{parsedTags}</p>\r\n                        </div>\r\n                        {visible &&\r\n                        <button className=\"buttonAgendarCita\">Solicitar Maquillaje</button>\r\n                        }\r\n                        \r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PublicationScreen;","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\publicationPages\\CreatePublication.js",["195","196","197","198","199"],[],"import React, { useRef, useState, useEffect } from 'react';\r\nimport \"../../styles/Publications.css\";\r\nimport Navbar from \"../../components/Navbar\";\r\nimport back from \"../../components/assets/arrowBack.png\";\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport 'primereact/resources/themes/saga-blue/theme.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport imagePlaceholder from '../../components/assets/imagePlaceHolder.png';\r\nimport { getStorage, ref, uploadBytes } from \"firebase/storage\";\r\nimport { UpdateSubcategories } from '../categoryPages/ModifyCategory';\r\n\r\nfunction CreatePublication(){\r\n    // VARIABLES -----------------------------------------------------------------\r\n    const navigate = useNavigate();\r\n    const hiddenFileInput = useRef(null);\r\n\r\n    const baseAPIurl = 'http://localhost:5000';\r\n    const [selectedName, setSelectedName] = useState('');\r\n    const [blobImage, setBlobImage] = useState('-');\r\n    const [selectedDescription, setSelectedDescription] = useState('');\r\n    const [selectedTags, setSelectedTags] = useState('');\r\n    const [selectedImage, setImage] = useState(imagePlaceholder);\r\n    const [selectedCategory, setSelectedCategory] = useState('');\r\n    const [selectedSubcategory, setSelectedSubcategory] = useState('');\r\n    const [categories, setCategories] = useState([]);\r\n    const [parsedCategories, setParsedCategories] = useState([]);\r\n    const [subcategories, setSubcategories] = useState([]);\r\n\r\n    // FUNCTIONS -----------------------------------------------------------------\r\n\r\n    const getCategories = async () => {\r\n        const response = await fetch(baseAPIurl + '/category/all', {\r\n            method: 'GET',\r\n        }).then(res => res.json());\r\n        setCategories(response);\r\n        let categorylist = [];\r\n        for (let i = 0; i < response.length; i++) {\r\n            categorylist.push(response[i].name);\r\n        }\r\n        setParsedCategories(categorylist);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCategories();\r\n    }, []);\r\n\r\n    const handleClickImage = (event) => {\r\n        hiddenFileInput.current.click();\r\n    };\r\n\r\n    const handleChangeImage = (event) => {\r\n        const fileUploaded = event.target.files;\r\n        if (fileUploaded[0]) {\r\n            setImage(URL.createObjectURL(fileUploaded[0]));\r\n            setBlobImage(fileUploaded[0]);\r\n        }\r\n    };\r\n\r\n    const getSubcategories = (pCategory) => {\r\n        let subcategorylist = [];\r\n        for (let i = 0; i < categories.length; i++) {\r\n            if (categories[i].name === pCategory) {\r\n                for (let j = 0; j < categories[i].subCategories.length; j++) {\r\n                    subcategorylist.push(categories[i].subCategories[j].name);\r\n                }\r\n            }\r\n        }\r\n        setSubcategories(subcategorylist);\r\n    }\r\n\r\n\r\n    const handlePublication = async(event) => {\r\n        event.preventDefault();\r\n\r\n        if (!selectedName || !selectedDescription || !selectedTags || !selectedCategory || !selectedSubcategory || !selectedImage) {\r\n            alert(\"ERROR: Todos los campos son obligatorios\");\r\n            return;\r\n        }\r\n\r\n        if (selectedDescription.length > 122) {\r\n            alert(\"ERROR: La descripción es muy larga, el máximo es 122 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedDescription.length < 28) {\r\n            alert(\"ERROR: La descripción es muy corta, el mínimo es 28 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedName.length > 22) {\r\n            alert(\"ERROR: El nombre es muy largo, el máximo es 22 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedDescription.length < 3) {\r\n            alert(\"ERROR: La descripción es muy corta, el mínimo es 3 caracteres\");\r\n            return;\r\n        }\r\n\r\n        if (selectedImage === imagePlaceholder) {\r\n            alert(\"ERROR: Debe seleccionar una imagen\");\r\n            return;\r\n        }\r\n        if (blobImage === '-') {\r\n            alert(\"ERROR: Debe seleccionar una imagen\");\r\n            return;\r\n        }\r\n\r\n        let result = await createPublication(selectedName, selectedDescription, selectedTags, selectedCategory, selectedSubcategory);\r\n        if (result.status === 200) {\r\n            alert(\"Publicación creada con éxito\");\r\n            navigate('/PublicationManagement');\r\n        } else {\r\n            alert(\"ERROR: No se pudo crear la publicación\");\r\n        }\r\n    };\r\n\r\n    const createPublication = async (pName, pDescription, pTags, pCategory, pSubcategory) => {\r\n        const date = new Date();\r\n        const year = date.getFullYear();\r\n        const month = date.getMonth() + 1; // months are zero indexed\r\n        const day = date.getDate();\r\n        const formattedDate = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year.toString().slice(-2)}`;\r\n\r\n        // get id\r\n        const currentId = await fetch(baseAPIurl + '/publications/get/id', {\r\n            method: 'GET',\r\n        }).then(res => res.json());\r\n\r\n        // update the id\r\n        const nextId = await fetch(baseAPIurl + '/publications/update/id', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }, body: JSON.stringify({\r\n                id: currentId + 1\r\n            })\r\n        });\r\n\r\n        // upload the image\r\n\r\n        let formData = new FormData();\r\n        formData.append('image', blobImage)\r\n\r\n        const uploadImage = await fetch(baseAPIurl + '/image/upload/publications/' + currentId.toString(), {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            },\r\n            body: formData\r\n        }).then(res => res.json());\r\n\r\n        // save the url of the image\r\n        let imageURL = uploadImage.imageUrl;\r\n\r\n        //define the path of the image\r\n        let imagePath = 'Publications/' + currentId.toString();\r\n\r\n        // create the publication\r\n        const newData = await fetch(baseAPIurl + '/publications/create',{\r\n            method: 'POST',\r\n            headers : {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                id: currentId,\r\n                name: pName,\r\n                description: pDescription,\r\n                imagePath: imagePath,\r\n                date: formattedDate,\r\n                tags: pTags.split(/[# ,]+/).map((tag) => tag.trim()).slice(1),\r\n                category: pCategory,\r\n                subcategory: pSubcategory,\r\n                imageURL: imageURL\r\n            })\r\n        });\r\n        \r\n        return newData;\r\n    }\r\n\r\n    // RETURN -----------------------------------------------------------------\r\n    return (\r\n        <div className=\"ModifyCreatePublication\">\r\n            <Navbar showIcons={true} />\r\n            <Link to={\"/PublicationManagement\"}><button className=\"backManagementPublication\"><img src={back} alt=\"\" /></button></Link>\r\n            <section className=\"layoutModifyCreatePublication\">\r\n                <div className=\"gridPosition\">\r\n                    <label>Nombre</label><br />\r\n                    <input value={selectedName} onChange={(e) => setSelectedName(e.target.value)} type=\"text\" id=\"namePublication\" name=\"name\" /><br />\r\n\r\n                    <label>Descripción</label><br />\r\n                    <textarea value={selectedDescription} onChange={(e) => setSelectedDescription(e.target.value)} type=\"text\" id=\"descriptionPublication\" name=\"description\" /><br />\r\n\r\n                    <button type=\"submit\" className=\"buttonModifyCreatePublication\" onClick={handlePublication}>Crear publicación</button>\r\n                </div>\r\n                <div>\r\n                    <label>Tags</label><br />\r\n                    <input value={selectedTags} onChange={(e) => setSelectedTags(e.target.value)} type=\"text\" id=\"tagsPublication\" name=\"tags\" /><br />\r\n\r\n                    <label>Categoría</label><br />\r\n                    <Dropdown value={selectedCategory} onChange={(e) => { setSelectedCategory(e.target.value); getSubcategories(e.target.value); }} options={parsedCategories} placeholder=\"Seleccione una opción\" className=\"options\" />\r\n                    <br />\r\n\r\n                    <label>Subcategoría</label><br />\r\n                    <Dropdown value={selectedSubcategory} onChange={(e) => setSelectedSubcategory(e.target.value)} options={subcategories} placeholder=\"Seleccione una opción\" className=\"options\" />\r\n                    <br />\r\n                </div>\r\n                <div>\r\n                    <img src={selectedImage} alt=\"\" name=\"image\" />\r\n                    <button className=\"buttonLoadImage\" type=\"button\" onClick={handleClickImage}>Cargar imagen</button>\r\n                    <input type=\"file\" onChange={handleChangeImage} ref={hiddenFileInput} style={{ display: \"none\" }} />\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreatePublication;\r\n","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\components\\Navbar.js",["200","201","202"],[],"import React, { useState } from 'react';\r\nimport \"../styles/Navbar.css\";\r\nimport searchIcon from \"../components/assets/search.png\";\r\nimport shoppingIcon from \"../components/assets/shoppingbag.png\";\r\nimport accountIcon from \"../components/assets/user.png\";\r\nimport notificationOffIcon from \"../components/assets/NotificationOff.png\";\r\nimport notificationOnIcon from \"../components/assets/NotificationOn.png\";\r\nimport { useNavigate } from 'react-router-dom'; \r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\n\r\n\r\n\r\nconst Navbar = ({ showIcons = true }) => {\r\n  const [notification, setNotification] = useState(null);\r\n  const [isOn, setIsOn] = useState(false);\r\n  const icon = isOn ? notificationOnIcon : notificationOffIcon;\r\n  let username = localStorage.getItem('username');\r\n  console.log(username);\r\n  const navigate = useNavigate();\r\n\r\n  const notificationClose = () => {\r\n    setNotification(null);\r\n  };\r\n  \r\n  const notificationOpen = (event) => {\r\n    setNotification(event.currentTarget);\r\n  }\r\n\r\n  const getAccount = async(pIcon) => {\r\n    const response = await fetch('http://localhost:5000/getAccount',{\r\n      method: 'GET',\r\n      headers : {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'Authorization': username \r\n      }\r\n    });\r\n\r\n    if(response.ok){\r\n      const data = await response.json();\r\n\r\n      if(pIcon === true){\r\n        if(data.account.admin === true){\r\n          navigate('/accountAdmin');\r\n        }else{\r\n          navigate('/accountUser');\r\n        }\r\n      }else{\r\n        if(data.account.admin === true){\r\n          navigate('/deliveryPending');\r\n        }else{\r\n          navigate('/Cart');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const loginPage = () => {\r\n    if(username === null || username === ''){\r\n      navigate('/LoginRegister');\r\n    }else{\r\n      getAccount(true);\r\n    }\r\n  };\r\n\r\n  const shoppingPage = () =>{\r\n    getAccount(false);\r\n  }\r\n\r\n  return ( \r\n  \t<div className=\"navbar\">\r\n        <div className=\"leftSide\">\r\n            <a href=\"/\"><h2>Mystique Makeup</h2></a>\r\n        </div>\r\n        {showIcons && (\r\n          <div className=\"rightSide\">\r\n            { username && <li><a href=\"/#\"  onClick={notificationOpen}><img src={icon} alt=\"\"/></a></li>}\r\n            <Menu id=\"simple-menu\" notification={notification} keepMounted open={Boolean(notification)} onClose={notificationClose}>\r\n              <MenuItem onClick={notificationClose}>Notificación 3</MenuItem>\r\n            </Menu>\r\n            {username && <li><a><img src={shoppingIcon} alt=\"\"onClick={shoppingPage}/></a></li>}\r\n            <li><a><img src={accountIcon} alt=\"\" onClick={loginPage}/></a></li>\r\n            <li><a href=\"/Search\"><img src={searchIcon} alt=\"\"/></a></li>\r\n          </div>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default Navbar;\r\n\r\n/*\r\nimport { useEffect } from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\n\r\nconst ENDPOINT = 'http://localhost:4000';  // Cambia esto por la URL de tu servidor\r\n\r\nconst User = ({ username }) => {\r\n  useEffect(() => {\r\n    const socket = socketIOClient(ENDPOINT);\r\n    socket.on('notification', (message) => {\r\n      // Aquí puedes actualizar el estado de tu aplicación para mostrar la notificación\r\n    });\r\n  }, []);\r\n\r\n  // ...\r\n};\r\n */","C:\\Users\\Dell\\OneDrive\\Documents\\GitHub\\MystiqueMakeup\\src\\pages\\Calendar.js",[],[],{"ruleId":"203","severity":1,"message":"204","line":16,"column":13,"nodeType":"205","endLine":16,"endColumn":35},{"ruleId":"203","severity":1,"message":"204","line":12,"column":7,"nodeType":"205","endLine":12,"endColumn":33},{"ruleId":"206","severity":1,"message":"207","line":105,"column":11,"nodeType":"208","messageId":"209","endLine":105,"endColumn":19},{"ruleId":"206","severity":1,"message":"207","line":119,"column":11,"nodeType":"208","messageId":"209","endLine":119,"endColumn":19},{"ruleId":"210","severity":1,"message":"211","line":137,"column":6,"nodeType":"212","endLine":137,"endColumn":8,"suggestions":"213"},{"ruleId":"210","severity":1,"message":"214","line":141,"column":6,"nodeType":"212","endLine":141,"endColumn":19,"suggestions":"215"},{"ruleId":"216","severity":1,"message":"217","line":196,"column":1,"nodeType":"218","messageId":"219","endLine":198,"endColumn":4},{"ruleId":"210","severity":1,"message":"220","line":48,"column":8,"nodeType":"212","endLine":48,"endColumn":10,"suggestions":"221"},{"ruleId":"210","severity":1,"message":"222","line":167,"column":8,"nodeType":"212","endLine":167,"endColumn":10,"suggestions":"223"},{"ruleId":"210","severity":1,"message":"224","line":179,"column":8,"nodeType":"212","endLine":179,"endColumn":26,"suggestions":"225"},{"ruleId":"210","severity":1,"message":"226","line":200,"column":8,"nodeType":"212","endLine":200,"endColumn":26,"suggestions":"227"},{"ruleId":"206","severity":1,"message":"228","line":311,"column":15,"nodeType":"208","messageId":"209","endLine":311,"endColumn":21},{"ruleId":"206","severity":1,"message":"229","line":44,"column":11,"nodeType":"208","messageId":"209","endLine":44,"endColumn":16},{"ruleId":"206","severity":1,"message":"230","line":29,"column":12,"nodeType":"208","messageId":"209","endLine":29,"endColumn":26},{"ruleId":"206","severity":1,"message":"231","line":29,"column":28,"nodeType":"208","messageId":"209","endLine":29,"endColumn":45},{"ruleId":"206","severity":1,"message":"228","line":102,"column":15,"nodeType":"208","messageId":"209","endLine":102,"endColumn":21},{"ruleId":"203","severity":1,"message":"204","line":20,"column":13,"nodeType":"205","endLine":20,"endColumn":38},{"ruleId":"210","severity":1,"message":"232","line":50,"column":8,"nodeType":"212","endLine":50,"endColumn":10,"suggestions":"233"},{"ruleId":"206","severity":1,"message":"207","line":32,"column":19,"nodeType":"208","messageId":"209","endLine":32,"endColumn":27},{"ruleId":"206","severity":1,"message":"234","line":69,"column":13,"nodeType":"208","messageId":"209","endLine":69,"endColumn":23},{"ruleId":"210","severity":1,"message":"235","line":79,"column":8,"nodeType":"212","endLine":79,"endColumn":10,"suggestions":"236"},{"ruleId":"206","severity":1,"message":"237","line":73,"column":13,"nodeType":"208","messageId":"209","endLine":73,"endColumn":27},{"ruleId":"210","severity":1,"message":"238","line":82,"column":8,"nodeType":"212","endLine":82,"endColumn":10,"suggestions":"239"},{"ruleId":"210","severity":1,"message":"232","line":92,"column":6,"nodeType":"212","endLine":92,"endColumn":8,"suggestions":"240"},{"ruleId":"210","severity":1,"message":"232","line":45,"column":6,"nodeType":"212","endLine":45,"endColumn":8,"suggestions":"241"},{"ruleId":"203","severity":1,"message":"204","line":20,"column":11,"nodeType":"205","endLine":20,"endColumn":36},{"ruleId":"210","severity":1,"message":"232","line":51,"column":6,"nodeType":"212","endLine":51,"endColumn":8,"suggestions":"242"},{"ruleId":"206","severity":1,"message":"207","line":33,"column":19,"nodeType":"208","messageId":"209","endLine":33,"endColumn":27},{"ruleId":"206","severity":1,"message":"243","line":95,"column":11,"nodeType":"208","messageId":"209","endLine":95,"endColumn":15},{"ruleId":"210","severity":1,"message":"244","line":131,"column":8,"nodeType":"212","endLine":131,"endColumn":10,"suggestions":"245"},{"ruleId":"206","severity":1,"message":"228","line":134,"column":15,"nodeType":"208","messageId":"209","endLine":134,"endColumn":21},{"ruleId":"210","severity":1,"message":"246","line":40,"column":8,"nodeType":"212","endLine":40,"endColumn":10,"suggestions":"247"},{"ruleId":"210","severity":1,"message":"248","line":46,"column":8,"nodeType":"212","endLine":46,"endColumn":21,"suggestions":"249"},{"ruleId":"210","severity":1,"message":"244","line":76,"column":8,"nodeType":"212","endLine":76,"endColumn":10,"suggestions":"250"},{"ruleId":"206","severity":1,"message":"251","line":10,"column":10,"nodeType":"208","messageId":"209","endLine":10,"endColumn":20},{"ruleId":"206","severity":1,"message":"252","line":10,"column":22,"nodeType":"208","messageId":"209","endLine":10,"endColumn":25},{"ruleId":"206","severity":1,"message":"253","line":10,"column":27,"nodeType":"208","messageId":"209","endLine":10,"endColumn":38},{"ruleId":"206","severity":1,"message":"254","line":11,"column":10,"nodeType":"208","messageId":"209","endLine":11,"endColumn":29},{"ruleId":"206","severity":1,"message":"228","line":132,"column":15,"nodeType":"208","messageId":"209","endLine":132,"endColumn":21},{"ruleId":"206","severity":1,"message":"255","line":16,"column":16,"nodeType":"208","messageId":"209","endLine":16,"endColumn":23},{"ruleId":"203","severity":1,"message":"204","line":82,"column":30,"nodeType":"205","endLine":82,"endColumn":33},{"ruleId":"203","severity":1,"message":"204","line":83,"column":17,"nodeType":"205","endLine":83,"endColumn":20},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'calculateTotal' and 'getCart'. Either include them or remove the dependency array.","ArrayExpression",["256"],"React Hook useEffect has a missing dependency: 'calculateTotal'. Either include it or remove the dependency array.",["257"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","React Hook useEffect has a missing dependency: 'getPurchases'. Either include it or remove the dependency array.",["258"],"React Hook useEffect has a missing dependency: 'getCart'. Either include it or remove the dependency array.",["259"],"React Hook useEffect has missing dependencies: 'address' and 'prices'. Either include them or remove the dependency array.",["260"],"React Hook useEffect has missing dependencies: 'cantons', 'selectedCanton', and 'selectedProvince'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setAddressText' needs the current value of 'selectedCanton'.",["261"],"'nextId' is assigned a value but never used.","'Check' is assigned a value but never used.","'subcatSelected' is assigned a value but never used.","'setSubcatSelected' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAccount'. Either include it or remove the dependency array.",["262"],"'productVar' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getProduct'. Either include it or remove the dependency array.",["263"],"'publicationVar' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPublication'. Either include it or remove the dependency array.",["264"],["265"],["266"],["267"],"'test' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAccount' and 'username'. Either include them or remove the dependency array.",["268"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["269"],"React Hook useEffect has a missing dependency: 'parseTags'. Either include it or remove the dependency array.",["270"],["271"],"'getStorage' is defined but never used.","'ref' is defined but never used.","'uploadBytes' is defined but never used.","'UpdateSubcategories' is defined but never used.","'setIsOn' is assigned a value but never used.",{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"284","fix":"290"},{"desc":"284","fix":"291"},{"desc":"284","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"293","fix":"299"},"Update the dependencies array to be: [calculateTotal, getCart]",{"range":"300","text":"301"},"Update the dependencies array to be: [calculateTotal, productList]",{"range":"302","text":"303"},"Update the dependencies array to be: [getPurchases]",{"range":"304","text":"305"},"Update the dependencies array to be: [getCart]",{"range":"306","text":"307"},"Update the dependencies array to be: [address, prices, selectedProvince]",{"range":"308","text":"309"},"Update the dependencies array to be: [cantons, selectedCanton, selectedDistrict, selectedProvince]",{"range":"310","text":"311"},"Update the dependencies array to be: [getAccount]",{"range":"312","text":"313"},"Update the dependencies array to be: [getProduct]",{"range":"314","text":"315"},"Update the dependencies array to be: [getPublication]",{"range":"316","text":"317"},{"range":"318","text":"313"},{"range":"319","text":"313"},{"range":"320","text":"313"},"Update the dependencies array to be: [getAccount, username]",{"range":"321","text":"322"},"Update the dependencies array to be: [id]",{"range":"323","text":"324"},"Update the dependencies array to be: [parseTags, publication]",{"range":"325","text":"326"},{"range":"327","text":"322"},[4031,4033],"[calculateTotal, getCart]",[4088,4101],"[calculateTotal, productList]",[1578,1580],"[getPurchases]",[5815,5817],"[getCart]",[6205,6223],"[address, prices, selectedProvince]",[6891,6909],"[cantons, selectedCanton, selectedDistrict, selectedProvince]",[1428,1430],"[getAccount]",[3284,3286],"[getProduct]",[3305,3307],"[getPublication]",[2381,2383],[1154,1156],[1284,1286],[4181,4183],"[getAccount, username]",[1323,1325],"[id]",[1435,1448],"[parseTags, publication]",[2173,2175]]